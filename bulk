#!/usr/bin/python
import argparse
import afal

def do_transaction(d):
    if args.verbose:
        print "doing", d
    date = afal.str_to_date(d['date'])
    if 'buy' in d:
        cash = afal.gp_cp_to_cp(float(d.get('cash','0')), 0)
        debt = afal.gp_cp_to_cp(float(d.get('debt','0')), 0)
        item_id = afal.get_item_id(d['item'])
        item_name=d['item']
        char_id = afal.get_char_id(d['buyer'])
        char_name = d['buyer']
        char_name = afal.get_char_name(char_id)
        date = afal.str_to_date(d['date'])

        seller_id = afal.get_item_owner(item_id)
        if seller_id is None :
            seller_id = afal.party
        if seller_id == afal.party:
            party_id = afal.get_item_acquired_by(item_id)
            seller_name = 'Party ' + afal.get_party_name(party_id)
            sellers = afal.get_party_members(party_id)
            shares = 0
            for i in sellers:
                shares +=i[1]
        else:
            seller_name = afal.get_char_name(seller_id) if seller_id > afal.party else 'Someone'
            sellers = [[seller_id, 1]]
            shares = 1

        if debt > 0 and cash > 0:
            verb = " sold "
            t_for = " for " + afal.str_cp(cash) + " cash and " + afal.str_cp(debt) + " debt"
        elif debt > 0:
            verb = " sold "
            t_for = " for " + afal.str_cp(debt) + " debt"
        elif cash > 0:
            verb = " sold "
            t_for = " for " + afal.str_cp(cash) + " cash"
        else:
            verb = " gave "
            t_for = ''
        text = seller_name + verb + item_name + " to " + char_name + t_for

        afal.change_item_owner(item_id, char_id, cash + debt, date)
        journal_id = afal.journal(date, seller_id, char_id, cash + debt, text)
        if args.verbose:
            print char_name, "bought", item_name

        if 'virtual' not in d:
            cash_cp = cash
            debt_cp = debt
            for i in sellers:
                sid = i[0]
                sshare = float(i[1])
                sname = afal.get_char_name(sid)
                if sshare > 0 :
                    if cash_cp > 0 :
                        sh_cp = afal.divide_cp(sshare * cash_cp, shares)
                        if args.verbose:
                            print char_name, "paid", afal.str_cp(sh_cp), "to", sname
                        afal.chars_move_cash({'date':date, 'from_id':char_id,
 'to_id':sid, 'amount':sh_cp, 'from_name':char_name, 'to_name':sname,
 'item_id':item_id, 'item_name':item_name, 'part_of':journal_id})
                        cash_cp -= sh_cp
                    if debt_cp > 0 :
                        sh_cp = afal.divide_cp(sshare * debt_cp, shares)
                        if args.verbose :
                            print char_name, "owed", afal.str_cp(sh_cp), "to", sname
                        afal.insert_debt({'date':date, 'from_id':char_id, 'to_id':sid,
 'amount':sh_cp, 'share':sshare,'item_id':item_id, 'from_name':char_name,
 'to_name':sname, 'item_name':item_name, 'part_of':journal_id})
                        debt_cp -= sh_cp
                    shares -= sshare
    elif 'pay' in d:
        amount_cp = afal.gp_cp_to_cp(d['amount'],0)
        from_name = d['by']
        from_id = afal.get_char_id(from_name)
        payable = afal.get_char_payable(from_id)
        if 'to' in d:
            to_name = d['to']
            to_id = afal.get_char_id(to_name)
            ptmp = []
            for i in payable:
                if i['to_id'] == to_id:
                    ptmp.append(i)
            payable = ptmp
        else:
            to_name = 'his debts'
            to_id = None

        note = ' (' + d['note'] + ')' if 'note' in d else ''
        if len(payable) == 0:
            if to_id is None:
                print from_name, "has no debts to pay"
                return
            afal.chars_move_cash({'date':date, 'from_id':from_id,
 'to_id':to_id, 'amount':amount_cp, 'from_name':from_name, 'to_name':to_name,
 'note':note})
            return
        shares = 0.0
        owed = 0
        for i in payable:
            shares += i['share']
            owed += i['amount']
        if amount_cp > owed:
            print from_name, "only owes", afal.str_cp(owed), "not", afal.str_cp(amount_cp)
            return
        text = from_name + ' paid ' + afal.str_cp(amount_cp) + ' to ' + to_name + note
        journal_id = afal.journal(date, from_id, to_id, amount_cp, text)
        note = ''
        topay = {}
        for i in payable:
            id = i['debt_id']
            this_owed = i['amount']
            this_share = i['share']
            to_id = i['to_id']
            i['date'] = date
            i['from_name'] = from_name
            to_name = afal.get_char_name(to_id)
            i['to_name'] = to_name
            i['part_of'] = journal_id
            i['note'] = note
            this_cp = afal.divide_cp(amount_cp * this_owed, owed)
            if this_cp == this_owed:
                afal.delete_debt(i, ' paid off ')
            else:
                afal.debt_lower_owed(i, this_cp, ' paid ')
            if 'virtual' not in d:
                if to_name in topay:
                    topay[to_name]['amount'] += this_cp
                else:
                    i['amount'] = this_cp
                    topay[to_name] = i
            amount_cp -= this_cp
            owed -= this_owed
            shares -= this_share

        if 'virtual' not in d:
            for i in topay:
                afal.chars_move_cash(topay[i])

    elif 'owe' in d:
        date = afal.str_to_date(d['date'])
        debt_cp = afal.gp_cp_to_cp(d['amount'], 0)
        char_id = afal.get_char_id(d['by'])
        char_name = d['by']
        shares = 0.0
        try:
            party_id = afal.get_party_id(d['to'])
            party_name = d['to']
            lender_name = party_name
            lender_id = party_id
            lenders = afal.get_party_members(party_id)
            for i in lenders :
                shares += float(i[1])

        except:
            party_id = None
            lender_id = afal.get_char_id(d['to'])
            lender_name = d['to']
            lenders = [ [lender_id, 1 ] ]
            shares = 1;

        if 'item' in d:
            item_name = d['item']
            item_id = afal.get_item_id(item_name)
            itext = ' for ' + item_name
        else:
            item_id = None
            item_name = None
            itext = ''
        journal_id = None
        if len(lenders) > 1:
            journal_id = afal.journal(date, lender_id, char_id, debt_cp,
 lender_name + " lent " + afal.str_cp(debt_cp) + " to " + char_name + itext )
        for i in lenders :
            lid = i[0]
            lshare = float(i[1])
            lname = afal.get_char_name(lid)
            if lshare > 0 :
                sh_cp = int(lshare * debt_cp / shares)
                afal.insert_debt({'date':date, 'from_id':char_id, 'to_id':lid,
'amount':sh_cp, 'share':lshare, 'item_id':item_id, 'from_name':char_name,
 'to_name':lname, 'item_name':item_name, 'part_of':journal_id})

    else:
        print "Unknown transaction in", d
        return


parser = argparse.ArgumentParser("read transactions from a file and do them")
parser.add_argument("--verbose", "-v", help="print progress messages", action='store_true', default=False)
parser.add_argument("--file", "-f", help="file to read", default="bulk.dat")
args = parser.parse_args()

file=open(args.file)
afal.parse_file(file,do_transaction,dict())
afal.fini()
