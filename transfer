#!/usr/bin/python
import sys
import argparse
import afal

parser = argparse.ArgumentParser("Transfer debts so that nobody ends up both owing money and being owed money.")
parser.add_argument("--verbose", "-v", help="print progress messages", action='store_true', default=False)
parser.add_argument("date", help="When the debt-transfer(s) happened")
parser.add_argument("name", help="Character(s) whose debts will be transferred", nargs='+')
args = parser.parse_args()

date = args.date
for char in args.name :
    try :
        char_id = int ( char )
        char_name = afal.get_char_name(char_id)

    except :
        char_id = afal.get_char_id(char)
        char_name = char

    receivable = afal.get_char_rec_xferable(char_id)
    payable = afal.get_char_pay_xferable(char_id)
    if len(payable) == 0 or len(receivable) == 0 :
        if args.verbose :
            print "No debts to transfer for", char_name
        continue
    print char_name, "payable", payable, "receivable", receivable
# payable holds a list of of who we owe money to,
# receivable holds a list of who owes us money,
    pay_cp = 0
    pay_shares = 0.0
    for i in range(0,len(payable)) :
        pay_cp += payable[i][3]
        pay_shares += payable[i][4]
    rec_cp = 0
    rec_shares = 0.0
    for i in range(0,len(receivable)) :
        rec_cp += receivable[i][3]
        rec_shares += receivable[i][4]
    if rec_cp > pay_cp :
        xfer_cp = pay_cp

    else :
        xfer_cp = rec_cp

    for i in range ( 0, len(receivable)) :
        for j in range ( 0, len(payable)) :
            this_xfer_cp = afal.divide_cp(xfer_cp * receivable[i][3] * payable[j][3], rec_cp * pay_cp)
            this_xfer_share = payable[j][4] / pay_shares * receivable[i][4]
            print "transfer", xfer_cp, pay_cp, pay_shares, rec_cp, rec_shares, receivable[i], payable[j], this_xfer_cp, this_xfer_share
            if this_xfer_cp > 0 and this_xfer_share > 0 :
                afal.decrease_debt(receivable[i][0], this_xfer_cp)
                if rec_cp > pay_cp :
                    afal.adjust_debt_repay_order(receivable[i][0],receivable[i][2]-1)
                afal.decrease_debt(payable[j][0], this_xfer_cp)
                afal.insert_debt(date, receivable[i][1], payable[j][1], this_xfer_cp, this_xfer_share, repay_order=receivable[i][2], item_id=payable[j][5])
                afal.journal(date, char_id, receivable[i][1], this_xfer_cp,
 char_name + " transferred " + afal.str_cp(this_xfer_cp) + " of debt from "
 + afal.get_char_name(payable[j][1]) + " to " + afal.get_char_name(receivable[i][1]) )
afal.fini()
