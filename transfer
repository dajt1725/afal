#!/usr/bin/python
import sys
import argparse
import afal

parser = argparse.ArgumentParser("Transfer debts so that nobody ends up both owing money and being owed money.")
parser.add_argument("--verbose", "-v", help="print progress messages", action='store_true', default=False)
parser.add_argument("date", help="When the debt-transfer(s) happened")
parser.add_argument("name", help="Character(s) whose debts will be transferred", nargs='+')
args = parser.parse_args()

date = afal.str_to_date(args.date)
for char in args.name :
    try :
        char_id = int ( char )
        char_name = afal.get_char_name(char_id)

    except :
        char_id = afal.get_char_id(char)
        char_name = char

    receivable = afal.get_char_rec_xferable(char_id)
    payable = afal.get_char_pay_xferable(char_id)
    if len(payable) == 0 or len(receivable) == 0 :
        if args.verbose :
            print "No debts to transfer for", char_name
        continue
    print char_name, "payable", payable, "receivable", receivable
# payable holds a list of of who we owe money to,
# receivable holds a list of who owes us money,
    pay_cp = 0
    pay_shares = 0.0
    for i in payable :
        pay_cp += i['amount']
        pay_shares += i['share']
    rec_cp = 0
    rec_shares = 0.0
    for i in receivable :
        rec_cp += i['amount']
        rec_shares += i['share']
    if rec_cp > pay_cp :
# All payable debts go away
        xfer_cp = pay_cp
        j1 = 0
        journal_id = afal.journal(date, char_id, None, xfer_cp,
 char_name + " transferred all their payable debt, " + afal.str_cp(xfer_cp)
 + " in " + str(len(payable)) + " debts to " + str(len(receivable)) + " receivable debts")
        while j1 < len(payable) :
            j2 = j1
            this_pay_cp = 0
            this_pay_share = 0
            while payable[j2]['to_id'] == payable[j1]['to_id']:
                this_pay_cp += payable[j2]['amount']
                this_pay_share += payable[j2]['share']
                j2 =j2 + 1

            afal.journal ( date, char_id, None, this_pay_cp,
 char_name + " transferred " + str(1+j2-j1) + " payable debts from "
 + afal.get_char_name(payable[j1]['to_id']), journal_id )
            i1 = 0
            tmp_rec_cp = rec_cp
            while i1 < len(receivable) :
                i2 = i1
                this_rec_cp = 0
                this_rec_share = 0
                while receivable[i2]['from_id'] == receivable[i1]['from_id']:
                    this_rec_cp += receivable[i]['amount']
                    this_rec_share += receivable[i]['share']
                    i2 = i2 + 1
                this_xfer_cp = afal.divide_cp(this_pay_cp * this_rec_cp, pay_cp)
                this_xfer_share = this_pay_share  * this_rec_share / pay_shares
                afal.insert_debt(date, receivable[i1][1], payable[j1]['to_id'],
 this_xfer_cp, this_xfer_share, repay_order=receivable[i1]['order'])
                tmp_rec_cp = this_rec_cp
                for i in range(i1, i2-1):
                    id = receivable[i]['debt_id']
                    owed = receivable[i]['amount']
                    this_sub_cp = afal.divide_cp(this_xfer_cp*owed, tmp_rec_cp)
                    if this_sub_cp == owed:
                        afal.delete_debt(id)
                    else:
                        afal.bump_debt_repay_order(id)
                        afal.set_debt_owed(id, owed-this_sub_cp)
                    tmp_rec_cp -= this_sub_cp
                pay_cp -= this_xfer_cp
                i1 = i2
            for j in range(j1, j2-1) :
                afal.delete_debt(payable[j]['debt_id'])
            j1 = j2

    else :
# All receivable debts go away
        xfer_cp = rec_cp
        journal_id = afal.journal(date, char_id, None, xfer_cp,
 char_name + " transferred all their receivable debt, " + afal.str_cp(xfer_cp)
 + " in " + str(len(receivable)) + " debts to " + str(len(payable)) + " payable debts")
        i1 = 0
        while i1 < len(receivable) :
            i2 = i1
            this_rec_cp = 0
            this_rec_share = 0
            while receivable[i2]['from_id'] == receivable[i1]['from_id']:
                this_rec_cp += receivable[i2]['amount']
                this_rec_share += receivable[i2]['share']
                i2 = i2 + 1
                if i2 >= len(receivable) :
                    break
            j1 = 0
            while j1 < len(payable) :
                j2 = j1
                this_pay_cp = 0
                this_pay_share = 0
                while payable[j1]['to_id'] == payable[j2]['to_id']:
                    this_pay_cp += payable[j2]['amount']
                    this_pay_share += payable[j2]['share']
                    j2 = j2 + 1
                    if j2 >= len(payable) :
                        break
                this_xfer_cp = afal.divide_cp(this_pay_cp * this_rec_cp, rec_cp)
                this_xfer_share = this_pay_share * this_rec_share / rec_shares
                afal.journal(date, char_id, receivable[i1]['from_id'], this_xfer_cp,
 char_name + " transferred " + afal.str_cp(this_xfer_cp) + " in " + str(1+i2-i1) + " receivable debts from "
 + afal.get_char_name(receivable[i1]['from_id']) + " to partially cover " + afal.str_cp(this_pay_cp) + " in "
 + str(1+j2-j1) + " debts to " +  afal.get_char_name(payable[j1]['to_id']), journal_id)
                afal.insert_debt(date, receivable[i1][1], payable[j1]['to_id'],
 this_xfer_cp, this_xfer_share, repay_order = receivable[i1]['order'])
                tmp_pay_cp = this_pay_cp
                for j in range(j1,j2-1) :
                    id = payable[j]['debt_id']
                    owed = payable[j]['amount']
                    this_sub_cp = afal.divide_cp(this_xfer_cp * owed, tmp_pay_cp)
                    if this_sub_cp == owed:
                        afal.delete_debt(id)
                    else:
                       afal.set_debt_owed(id, owed - this_sub_cp)
                    tmp_pay_cp -= this_sub_cp
                rec_cp -= this_xfer_cp
                j1 = j2
            for i in range(i1,i2-1) :
                afal.delete_debt(receivable[i]['debt_id'])
            i1 = i2
afal.fini()
