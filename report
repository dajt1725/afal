#!/usr/bin/python
import argparse
import afal

parser = argparse.ArgumentParser('Generate a report on all the characters')
parser.add_argument("--verbose", "-v", help="print progress messages", action='store_true', default=False)
parser.add_argument('--character', '-c', help='report on this character', default='Henkles')
parser.add_argument('--all', '-a', help='report on all characters', action='store_true', default=False)
args=parser.parse_args()

if args.all:
    characters = afal.get_characters()
else:
    characters = []
    characters.append([afal.get_char_id(args.character), args.character])

for char in characters :
    char_id = char[0]
    char_name = char[1]
    cash = afal.get_char_cash(char_id)
    items = afal.get_items_owned_by(char_id)
    parties = afal.get_char_parties(char_id)
    payable = afal.get_char_payable(char_id)
    receivable = afal.get_char_receivable(char_id)
    if cash > 0 :
        print char_name,"cash",afal.str_cp(cash)
    else :
        print char_name
    if len(parties) :
        print '\n ' + str(len(parties)) + ' Parties'
        for i in parties :
	    s1=''
	    if i[1] != 1.0 :
                s1 += ' for ' + str(i[1]) + ' share'
            comma = ' Items'
            pitems = afal.get_items_acquired_by(i[0])
            for j in pitems:
                if j[4] is None and j[3] is None:
                   s1 += comma + ' ' + j[0]
                   comma = ','
            print '  ' + afal.get_party_name(i[0]) + s1
    if len(items) :
        print '\n ' + str(len(items)) + ' Items'
        for i in items :
            s1 = ''
            p1 = ''
            if i[3] is None :
                p1 += "(Party item) "
            elif i[2] > 0:
                s1 += "  bought on " + i[3] + " for " + afal.str_cp(i[2])
            else:
                s1 += "  given on " + i[3]
            if i[1] is not None :
                s1 += "  Note: "+i[1]
            print "  "+p1+i[0]+s1
    if len(receivable) :
        sum = 0
        for i in receivable:
            sum += i[3]
        print '\n ' + str(len(receivable)) + ' Receivable debts (total ' + afal.str_cp(sum) + ')'
        from_char = ''
        line = ''
        ch_total = 0
        for i in receivable :
            ch = afal.get_char_name(i[1])
            if ch != from_char:
                if from_char != '':
                    print '  ' + from_char + ' (total ' + afal.str_cp(ch_total) + ')'
                    print line[:-1]
                    line = ''
                    ch_total = 0
                from_char = ch
            s1 = ''
            if i[7] != i[3]:
                s1 += ' of ' + afal.str_cp(i[7])
            if i[4] != 1.0 :
                s1 += ' for ' + str(i[4]) + ' share'
            if i[2] != 0:
                s1 += ' repay order '+str(i[2])
            s1 += ' contracted on ' + i[5]
            if i[6] is not None:
                s1 += ' for ' + afal.get_item_name(i[6])
            ch_total += i[3]
            line += '   ' + afal.str_cp(i[3]) + s1 + "\n"
        print '  ' + from_char + ' (total ' + afal.str_cp(ch_total) + ')'
        print line[:-1]

    if len(payable) :
        sum = 0
        for i in payable:
            sum += i[3]
        print '\n ' + str(len(payable)) + ' Payable debts (total ' + afal.str_cp(sum) + ')'
        from_char = ''
        line = ''
        ch_total = 0
        for i in payable :
            ch = afal.get_char_name(i[1])
            if ch != from_char:
                if from_char != '':
                    print '  ' + from_char + ' (total ' + afal.str_cp(ch_total) + ')'
                    print line[:-1]
                    line = ''
                    ch_total = 0
                from_char = ch
            s1 = ''
            if i[7] != i[3]:
                s1 += ' of ' + afal.str_cp(i[7])
            if i[4] != 1.0 :
                s1 += ' for ' + str(i[4]) + ' share'
            if i[2] != 0:
                s1 += ' repay order '+str(i[2])
            s1 += ' contracted on ' + i[5]
            if i[6] is not None:
                s1 += ' for ' + afal.get_item_name(i[6])
            ch_total += i[3]
            line += '   ' + afal.str_cp(i[3]) + s1 + "\n"
        print '  ' + from_char + ' (total ' + afal.str_cp(ch_total) + ')'
        print line[:-1]
    print ''

afal.fini()
