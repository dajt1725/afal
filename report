#!/usr/bin/python
# This can be used as either a cgi program or from the command line
from __future__ import print_function
import argparse
import afal_config
import afal
import cgi
import cgitb
import re


def format_share(s):
    if float(s) == 1.0:
        return '1'
    if float(s) == 0.0:
        return 'no'
    if float(s) == 0.5:
        return '&frac12;'
    if float(s) == 0.25:
        return '&frac14;'
# Shouldn't get here, but who knows?
    if s == int(float(s)):
        return str(int(s))
    s = str(s)
    if s[0:2] == '0.':
        s = s[1:]
    return s


def format_plural(n, s, p = None):
    """if len(n) is 1, return a singular string, else a plural one"""

    if type(n) is not int and type(n) is not float and type(n) is not str:
        n = len(n)
    if n == 1:
        f = '{n} {s}'
    elif p is None:
        f = '{n} {s}s'
    else:
        f = '{n} {p}'
    return f.format(n = n, s = s, p = p)


def format_date_log(d):
    if d is None:
        return None
    df = afal.date_to_str(d, False)
    if afal_config.text:
        return df
    return '<a href="{logs}{l}.html">{dt}</a>'.format(logs = afal_config.logs,
 l = re.sub(' ', '_', re.sub(' Festival|[a-z]*,', '', df)), dt = afal.date_to_str(d, True))


def format_date(d):
    if d is None:
        return None
    df = afal.date_to_str(d, False)
    if afal_config.text:
        return df
    dt = afal.date_to_str(d, True)
    if df in afal.date_list:
        return '<a href="{report}?journal=Show&start=date.{df}&end=date.{df}">{dt}</a>'.format(
 report = afal_config.report, df = df, dt = dt)
    return '<a href="{logs}{l}.html">{dt}</a>'.format(logs = afal_config.logs,
 l = re.sub(' ', '_', re.sub(' Festival|[a-z]*,', '', df)), dt = dt)


def format_character(c):
    if afal_config.text or c not in afal.character_list:
        return c
    else:
        return '<a href="{report}?generate=Show&todo=char.{c}">{c}</a>'.format(
 report = afal_config.report, c = c)


def format_party(p):
    if afal_config.text:
        return p
    elif p in afal.party_list:
        return '<a href="{report}?generate=Show&todo=party.{p}">{p}</a>'.format(
 report = afal_config.report, p = p)
    else:
        return format_character(p)


def party_to_log(p):
    return '<a href="{logs}{l}.html">'.format(logs = afal_config.logs, l = re.sub(r'([^-]*-)?([^-]+)-(Festival|[0-9]+)[A-Za-z]?-([^-]+)', r'\2_\3_\4', p))

def format_item(i, party = None):
    if afal_config.text:
        return i
    else:
        if party is None:
            tmp = afal.get_item_data(i)
            party = tmp['finder']
        return party_to_log(party) + i + '</a>'


def fmt_date(m):
    return format_date(afal.str_to_date(m.group(1)))


def munge_html(s):
    if s is None:
        return ''
    ret = s
    if afal_config.text:
        ret = re.sub(r'&frac12;', r'1/2', ret)
        ret = re.sub(r'&frac14;', r'1/4', ret)
        ret = re.sub(r'&quot;', r'"', ret)
        ret = re.sub(r'&apos;', r"'", ret)
        ret = re.sub(r'&amp;', r'&', ret)
        ret = re.sub(r'&eacute;', r'ee', ret)
        ret = re.sub(r'<p>(.*?)</p>', '\\1\n  ', ret)
        ret = re.sub(r'</?i>', r'', ret)
        ret = re.sub(r'</?sup>', r'', ret)
        ret = re.sub(r'</?a[^>]*>', r'', ret)
        ret = re.sub(r'</?font[^>]*>', r'', ret)
        ret = re.sub(r'<br>', '\n  ', ret)
    ret = re.sub(r'<d ([^>]*)>', fmt_date, ret)
    return ret


def list_to_txt(l):
    if l is None:
        return None
    elif len(l) == 1:
            return format_party(l[0])
    else:
        ret = 'and ' + format_party(l.pop())
    while len(l):
        ret = format_party(l.pop()) + ', ' + ret
    return ret


#############################################################################


def print_char(char, verbose = False):
    d = afal.get_char_data(char)
    for i in ('alignment', 'association', 'characteristics', 'class',
 'equipment', 'fullname', 'gender', 'name', 'note', 'player', 'race',
 'status'):
        d[i[0:2]] = munge_html(d[i])
    if d['al'] == '':
        d['al'] = 'Unknown Alignment'
    if d['cl'] == '':
        d['cl'] = 'Unknown Class'
    if d['ge'] == '':
        d['ge'] = 'Unknown Gender'
    if d['ra'] == '':
        d['ra'] = 'Unknown Race'
    if d['fu'] == '':
        d['fu'] = d['na']
    if d['pl'] == '':
        d['pl'] = d['fu']
        d['bg'] = afal_config.background_npc
    else:
        d['pl'] = '{fu} ({pl})'.format(fu = d['fu'], pl = d['pl'])
        d['bg'] = afal_config.background_pc

    if afal_config.text:
        f = (
 '\n                {na}\n',
 '{pl}  {as}  {st}  {ra} {ge}  {cl}  {al}',
 'Characteristics:  {ch}',
 'Equipment:  {eq}',
 'Note:  {no}',
 None,
 'Cash: {ca}',
 'Coins: {text}\n',
 '' )
    else:
        f= (
 '  <h2><b>{na}</b></h2>',
 '  <table border="border" width="95%" background="{bg}">\n'
 '   <tr><td width="{nw}%"><a name="{na}"><b>{pl}</b></a></td>'\
 '{st}{as}<td width="{mw}%">{ra} {ge}</td><td width="{mw}%">{cl}</td>'\
 '<td width="{mw}%">{al}</td></tr>',
 '   <tr><td colspan="{n}"><u>Characteristics:</u>  {ch}  </td>{pu}</tr>',
 '   <tr><td colspan="{n}"><u>Equipment:</u>  {eq}</td></tr>',
 '   <tr><td colspan="{n}"><u>Notes:</u>  {no}   </td></tr>',
 '  </table>',
 '<h3>Cash {ca}</h3>',
 '<h4>Coins: {text}</h4><hr />',
 '')
        if d['eq'] == '':
            d['eq'] = 'Unknown'
        if d['ch'] == '':
            d['ch'] = 'Forgotten'
        if d['no'] == '':
            d['no'] = 'None'
        pu = d.get('picture_url')
        if pu:
            if d['large_picture_url'] is not None:
                pu = '  <a href="/{lp}"><img src="/{pu}" alt="{fu}"</a>'.format(lp = d['large_picture_url'], pu = pu, fu = d['fu'])
            else:
                pu = '  <img src="/{pu}" alt="{fu}"></td>'.format(pu = pu, fu = d['fu'])
            d['pu'] = '<td colspan="1" rowspan="3" align="center" valign="center">{pu}</td>'.format(pu = pu)
        else:
            d['pu'] = ''
        if d['as'] == 'AFAL':
            d['nw'] = 40
            d['st'] = ''
            d['n'] = 3
            d['mw'] = 20
            d['as'] = ''
        else:
            if pu:
                 d['n'] = 4
            else:
                 d['n'] = 5
            if verbose:
                d['nw'] = 30
                d['st'] = '<td width="10%">{st}</td>'.format(**d)
                d['n'] += 1
            else:
                d['nw'] = 40
                d['st'] = ''
            d['nw'] = 40
            d['mw'] = 15
            d['as'] = '<td width="{mw}%">{as}</td>'.format(**d)

    if verbose:
        afal.pw(f[0].format(**d),**fmt)
    afal.pw(f[1].format(**d), **fmt)
    if d['ch'] != '':
        afal.pw(f[2].format(**d), **fmt)
    if d['eq'] != '':
        afal.pw(f[3].format(**d), **fmt)
    if d['no'] != '':
        afal.pw(f[4].format(**d), **fmt)
    if f[5]:
        afal.pw(f[5], **fmt)
    if verbose:
        cash = d['cash_cp']
        if cash:
            afal.pw(f[6].format(ca = afal.cp_to_str(cash)), **fmt)
        if 'coins' in d:
            sep = '{n} {name}'
            text = ''
            for i in d['coins']:
                name = i['abbrev'] if 'abbrev' in i else i['coin']
                n = i['quantity']
                if n == 1:
                    name = name.format(s = '', es = '', y = 'y')
                else:
                    name = name.format(s = 's', es = 'es', y = 'ies')
                text += sep.format(n = n, name = name);
                sep = ', {n} {name}'
            afal.pw(f[7].format(text=text), **fmt)
    afal.pw(f[8], **fmt)

def print_parties(parties):
    needshare = False
    for i in parties:
        if i[1] != 1.0:
            needshare = True
            break
    if afal_config.text:
        header = '{text}'
        lines = ('{text}{share}', '{text}{share}', '{text}{share}', '{text}{share}\n')
        line_share_1 = ''
        line_share_n = ' for {share} share'
        trailer = ''
        share = ''
    elif needshare:
        line_share_1 = '{share}'
        line_share_n = '{share}'
        lines = ('<tr><td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td></tr>\n')
        header = '<h3>{text}</h3><table border=1><tr>' + \
 (len(lines)-1) * '<th>Party</th><th>Share</th><th>|</th>' + '<th>Party</th><th>Share</th></tr>'
        trailer = '</table><hr />'
    else:
        lines = ('<tr><td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td></tr>\n')
        header = '<h3>{text}</h3><table border=1><tr><th colspan="{nlines}">Party</th></tr>'
        trailer = '</table><hr />'
        share = ''
    nlines = len(lines)
    afal.pw(header.format(text = format_plural(parties, 'Party', 'Parties'), nlines = nlines), **fmt_group_header)
    n = 0
    for i in parties:
        if needshare:
            share = format_share(i[1])
            if i[1] == 1:
                share = line_share_1.format(share = share)
            else:
                share = line_share_n.format(share = share)
        afal.pw(munge_html(lines[n].format(text = format_party(i[0]), share = share)), **fmt_neol_pad20)
        n += 1
        if n == nlines:
            n = 0
    while n != 0:
        afal.pw(lines[n].format(text='', share=''), **fmt_neol)
        n += 1
        if n == nlines:
            break
    afal.pw(trailer, **fmt)


def print_debt(l, tf, p):
    s = 0
    d={}
    needorder = False
    needshare = False
    needinitial = False
    for i in l:
        s += i['amount_cp']
        ch = i[tf]
        if ch not in d:
            d[ch] = {'sum':0, 'n':0}
        d[ch]['sum'] += i['amount_cp']
        n = d[ch]['n']
        d[ch][n] = {}
        d[ch][n]['amount_cp'] = afal.cp_to_str(i['amount_cp'])
        d[ch][n]['date'] = format_date(i['date'])
        d[ch][n]['order'] = str(i['order'])
        if i['order'] != 0:
            needorder = True
        d[ch][n]['share'] = format_share(i['share'])
        if float(i['share']) != 1.0:
            needshare = True
        if i['item'] is not None:
            d[ch][n]['item'] = i['item']
        d[ch][n]['initial_cp'] = afal.cp_to_str(i['initial_cp'])
        if i['initial_cp'] != i['amount_cp']:
            needinitial = True
        n += 1
        d[ch]['n'] = n

    hdr_initial = ''
    hdr_share = ''
    hdr_order = ''
    if afal_config.text:
        header = '{text}'
        ch_1 = '{char}\n'
        ch_n = '{char} Total {total}\n'
        initial_fmt = ' of {initial}'
        share_fmt = ' for {share} share'
        order_fmt = ' repay order {order}'
        item_fmt = ' for {item}'
        item_sh_fmt = ' of {item}'
        line = '{ch_txt}  {date:20} {amount}{initial}{order}{share}{item}'

        trailer = ''
    else:
        header = '<h3>{text}</h3><table border="1"><tr><th>Who</th><th>Date</th><th>Amount</th>{hdr_initial}{hdr_order}{hdr_share}<th>Item</th></tr>'
        if needinitial:
            hdr_initial = '<th>Initial</th>'
        if needshare:
            hdr_share = '<th>Share</th>'
        if needorder:
            hdr_order = '<th>Order</th>'
        ch_1 = '<td>{char}</td>'
        ch_n = '<td rowspan="{n}">{char} ({n} Total {total})</td>'
        initial_fmt = '<td>{initial}</td>'
        share_fmt = '<td>{share}</td>'
        order_fmt = '<td>{order}</td>'
        item_fmt = '{item}'
        item_sh_fmt = item_fmt
        line = '<tr>{ch_txt}<td>{date}</td><td>{amount}</td>{initial}{order}{share}<td>{item}</td></tr>'
        trailer = '</table><hr />'
    text = format_plural(l, p + ' Debt')
    if len(l) != 1:
        text += ' (Total ' + afal.cp_to_str(s) + ')'
    afal.pw(header.format(text = text, hdr_initial = hdr_initial, hdr_share = hdr_share, hdr_order = hdr_order), **fmt_group_header)
    k = d.keys()
    k.sort()
    for ch in k:
        char = format_character(ch)
        if d[ch]['n'] > 1:
            ch_txt = ch_n.format(char = char, total = afal.cp_to_str(d[ch]['sum']), n = d[ch]['n'])
        else:
            ch_txt = ch_1.format(char = char)
        for j in range(d[ch]['n']):
            date = d[ch][j]['date']
            amount = d[ch][j]['amount_cp']
            item = ''
            if needinitial and (not afal_config.text or d[ch][j]['initial_cp'] != amount):
                initial = initial_fmt.format(initial = d[ch][j]['initial_cp'])
            else:
                initial = ''
            if needshare and (not afal_config.text or d[ch][j]['share'] != '1'):
                share = munge_html(share_fmt.format(share = d[ch][j]['share']))
                item_fmt = item_sh_fmt
            else:
                share = ''
            if needorder and (not afal_config.text or d[ch][j]['order'] != '0'):
                order = order_fmt.format(order = d[ch][j]['order'])
            else:
                order = ''
            if 'item' in d[ch][j]:
                item = item_fmt.format(item = format_item(d[ch][j]['item']))
            else:
                item = ''
            afal.pw(line.format(ch_txt = ch_txt, date = date, amount = amount,
 initial = initial, share = share, order = order, item = item), **fmt)
            ch_txt = ''
    afal.pw(trailer, **fmt)


def get_item_entry(ind, i, f, func):
    var = i.get(ind)
    if var:
        return f[ind+'_pos'].format(v=func(var))
    else:
        return f[ind+'_neg']


def print_items(items, verb, show_note = False, show_finder = False, show_owner = False,
 show_holder = False):
    k = set()
    for i in items:
        for j in i.keys():
            if i[j] is not None:
               k |= set([j])
    show_note = 'note' in k if show_note else False
    if show_finder and 'finder' not in k:
        show_finder = False
    if show_holder and 'holder' not in k:
        show_holder = False
    if show_owner and 'owner' not in k:
        show_owner = False
    show_value = 'value_cp' in k
    show_date_xfrd = 'date_xfrd' in k

    if afal_config.text:
        group_hdr = '{text}'
        table_hdr = ''
        line = '{item}{note}{value}{finder}{owner}{holder}{date}'
        f = {
 'note_hdr': '', 'value_hdr': '', 'finder_hdr': '', 'owner_hdr': '', 'holder_hdr': '', 'date_hdr': '',
 'note_pos': ',  Note {v}', 'note_neg': '',
 'value_cp_pos': ',  Value {v}', 'value_cp_neg': '',
 'finder_pos': ',  Found by {v}', 'finder_neg': '',
 'owner_pos': ',  Owned by {v}',  'owner_neg': '',
 'holder_pos': ',  Held by {v}',  'holder_neg': '',
 'date_xfrd_pos': ',  Transferred on {v}','date_xfrd_neg': ''
 }
        trailer = ''
    else:
        group_hdr = '<h3>{text}</h3>'
        table_hdr = '<table border="1"><tr><th>Item</th>{note_hdr}{value_hdr}{finder_hdr}{owner_hdr}{holder_hdr}{date_hdr}</tr>\n'
        line = '<tr><td>{item}</td>{note}{value}{finder}{owner}{holder}{date}</tr>'
        f = {
 'note_hdr':   '<th>Note</th>',         'note_pos':   '<td>{v}</td>','note_neg':'<td></td>',
 'value_hdr':  '<th>Value</th>',        'value_cp_pos':  '<td>{v}</td>','value_cp_neg': '<td></td>',
 'finder_hdr': '<th>Found by</th>',     'finder_pos': '<td>{v}</td>','finder_neg':'<td></td>',
 'owner_hdr':  '<th>Owned by</th>',     'owner_pos':  '<td>{v}</td>','owner_neg': '<td></td>',
 'holder_hdr': '<th>Held by</th>',      'holder_pos': '<td>{v}</td>','holder_neg': '<td></td>',
 'date_hdr':   '<th>Date Transferred</th>', 'date_xfrd_pos': '<td>{v}</td>', 'date_xfrd_neg': '<td></td>'
 }
        trailer = '</table><hr />'

    if not show_note:
        f['note_hdr'] = ''
        f['note'] = ''
    if not show_value:
        f['value_hdr'] = ''
        f['value'] = ''
    if not show_finder:
        f['finder_hdr'] = ''
        f['finder'] = ''
    if not show_owner:
        f['owner_hdr'] = ''
        f['owner'] = ''
    if not show_holder:
        f['holder_hdr'] = ''
        f['holder'] = ''
    if not show_date_xfrd:
        f['date_hdr'] = ''
        f['date'] = ''
    if verb == 'All' or verb == '':
        verb = 'Item'
    elif verb != '':
        verb += ' Item'
    afal.pw(group_hdr.format(text=format_plural(items, verb)), **fmt_group_header)
    afal.pw(table_hdr.format(**f), **fmt_neol)
    for i in items:
        f['item'] = format_item(i['item'], party = i['finder'])
        if show_note:
            f['note'] = get_item_entry('note', i, f, munge_html)
        if show_value:
            f['value'] = get_item_entry('value_cp', i, f, afal.cp_to_str)
        if show_finder and (not afal_config.text or show_finder != i['finder']):
            f['finder'] = get_item_entry('finder', i, f, format_party)
        else:
            f['finder'] = ''
        if show_owner and (not afal_config.text or not show_finder or (i['owner'] != show_owner and i['owner'] != i['finder'])):
            f['owner'] = get_item_entry('owner', i, f, format_party)
        else:
            f['owner'] = ''
# We don't print the holder if
#    we weren't asked to
# OR       we're in text mode
#     AND     the holder is the one we were asked not to print
#         OR we've printed the same data as either the finder or the owner
# so we DO print the holder if
# We were asked to, AND (we're not in text mode OR...
        if not show_holder or (afal_config.text and \
 (i['holder'] == show_holder or ( show_owner and \
 i['holder'] == i['owner'] ) or (show_finder and i['holder'] == i['finder']))):
            f['holder'] = ''
        else:
            f['holder'] = get_item_entry('holder', i, f, format_party)
        if show_date_xfrd:
            f['date'] = get_item_entry('date_xfrd', i, f, format_date)
        afal.pw(line.format(**f), **fmt)
    afal.pw(trailer, **fmt)


def print_journal(cond, show_sub = False):
    j = afal.get_journal(cond)
    if len(j) < 1:
        return
    sub_hdr = ''
    sub = ''
    if afal_config.text:
        header = '{text}'
        day_header = '{date}'
        line = '{sub} {by} {text}'
        pri_fmt = ' {pri:>4}      '
        sub_fmt = ' {sub:>4}^{pri:<4} '
        day_trailer = ''
        trailer = ''
    else:
        header = '<h3>{text}</h3>'
        day_header = '<table width="100%" border="1"><tr>{sub_hdr}<th>{date}</th></tr>'
        if show_sub:
            sub_hdr = '<th width="8%">Seq</th>'
        line = '<tr>{sub}<td>{by} {text}</td></tr>'
        pri_fmt = '<td width="8%">{pri:>}</td>'
        sub_fmt = '<td width="8%">{sub:>}:<font color="green">{pri:<}</font></td>'
        day_trailer = '</table>'
        trailer = '<hr />'

    afal.pw(header.format(text = format_plural(j, 'Transaction Journal Entry',
 'Transaction Journal Entries')), **fmt_section_header)
    prev_date = None
    for e in j:
        date = e['date']
        if date != prev_date:
            if prev_date:
                afal.pw(day_trailer, **fmt)
            afal.pw(day_header.format(date=format_date_log(date), sub_hdr = sub_hdr), **fmt_group_header)
            prev_date = date
        if show_sub:
            if e['part_of'] is None:
                sub = pri_fmt.format(pri = str(e['journal_id']-1000000))
            else:
                sub = sub_fmt.format(sub =  str(e['journal_id']-1000000), pri = str(e['part_of']-1000000))
        by = e['by']
        to = e.get('to')
        if len(by) > 1 or (to is not None and len(to) > 1):
            f = {'each': 'each ', 'a': '', 's': 's', 'y': 'ies'}
        else:
            f = {'each': '', 'a': 'a ', 's': '', 'y': 'y'}
        f['by'] = list_to_txt(by)
        f['to'] = list_to_txt(to)
        if afal_config.text:
            f['cs'] = ''
            f['ce'] = ''
            f['cash'] = afal.cp_to_str(e['cash_cp'])
            f['virtual'] = afal.cp_to_str(e['virtual_cp'])
        else:
            f['cs'] = '<font color="purple">'
            f['ce'] = '</font>'
            f['cash'] = '<font color="purple">{cp}</font>'.format(cp=afal.cp_to_str(e['cash_cp']))
            f['virtual'] = '<font color="green">{cp}</font>'.format(cp = afal.cp_to_str(e['virtual_cp']))
        text = munge_html(e['description'].format(**f))
        afal.pw(line.format(sub = sub, by = f['by'], text = text), **fmt)
    if prev_date:
        afal.pw(day_trailer, **fmt)
    afal.pw(trailer, **fmt)


def print_full_character(c):
    if c == ['All']:
        c = afal.character_list
    if len(c) > 1:
        if afal_config.text:
            header = '{characters}\n'
        else:
            header = '<h1>{characters}</h1><br>'
        afal.pw(header.format(characters = format_plural(c, 'Character')),**fmt_section_header)
    for char in c:
        print_char(char, verbose = True)
        cparties = afal.get_char_parties(char)
        if len(cparties):
            print_parties(cparties)
        items = afal.get_items('Held_by', char)
        if len(items):
            print_items(items, '', show_note = args.note, show_finder = char, show_owner = char)
        receivable = afal.get_char_debts(char, 'Receivable')
        if len(receivable):
            print_debt(receivable, 'by', 'Receivable')
        payable = afal.get_char_debts(char, 'Payable')
        if len(payable):
            print_debt(payable, 'to', 'Payable')
# was primary=True
        t = {'on': 'latest', 'char2': char}
        if journal_args is not None:
            t.update(journal_args)
        print_journal(t)


def print_members(members):
    shares = sum(members.values())
    h = {}
    needshare = False
    for char in members:
        share = members[char]
        if share != 1:
            needshare = True
        h[char] = format_share(share)

    if afal_config.text:
        header = '{text}{shares}'
        lines = ('{text}{share}', '{text}{share}', '{text}{share}', '{text}{share}\n')
        share_text = ' for {share} share'
        noshare_text = ''
        trailer = ''
        share = ''
    elif needshare:
        lines = ('<tr><td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td></tr>\n')
        nlines = len(lines)
        header = '<h3>{text}{shares}</h3><br><table border="1"><tr>' + \
 (nlines-1) * '<th>Member</th><th>Share</th><th>|</th>' + '<th>Member</th><th>Share</th></tr>'
        share_text = '{share}'
        noshare_text = '1'
        trailer = '</table><hr />'
    else:
        header = '<h3>{text}{shares}</h3><br><table border="1"><tr><th colspan="{nlines}">Member</th></tr>'
        lines = ('<tr><td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td></tr>\n')
        trailer = '</table><hr />'

    nlines = len(lines)
    if shares != len(members):
        shares = ', ' + format_plural(format_share(shares), 'Share')
    else:
        shares = ''

    afal.pw(header.format(text = format_plural(members, 'Member'), shares = shares, nlines = nlines), **fmt_group_header)
    k = h.keys()
    k.sort()
    n = 0
    for i in k:
        if needshare:
            share = h[i]
            if share != '1':
                share = share_text.format(share = share)
            else:
                share = noshare_text
        afal.pw(munge_html(lines[n].format(text = format_character(i), share=share)), **fmt_neol_pad20)
        n += 1
        if n == nlines:
            n = 0
    while n != 0:
        afal.pw(lines[n].format(text='', share=''), **fmt_neol)
        n += 1
        if n == nlines:
            break
    afal.pw(trailer, **fmt)


def print_full_party(p):
    if p == ['All']:
        p = afal.party_list
    if afal_config.text:
        header = '{text}\n'
        header_pname = '{party}'
        header_data = '{type}  {date}  {note}'
    else:
        header = '<h1>{text}</h1>'
        header_pname = '<h2><b>{log}{party}</a></b></h2><br>'
        header_data = '{type}&nbsp;&nbsp;{date}&nbsp;&nbsp;{note}<hr />'
    if len(p) > 1:
        afal.pw(header.format(text = format_plural(p, 'Party', 'Parties')), **fmt_section_header)
    for party in p:
        data = afal.get_party_data(party)
        note = data.get('note')
        if not note:
            note = ''
        type = data['type']
#        if type == 'AFAL':
#            type = ''
        afal.pw(header_pname.format(party = party, log = party_to_log(party)), **fmt_group_header)
        afal.pw(header_data.format(type = type, date = format_date(data['date']), note = note), **fmt_group_header)

        members = data['members']
        if len(members):
            print_members(members)
        items = afal.get_items('Found_by', party)
        if len(items):
            print_items(items, 'Found', show_note = True, show_finder = False, show_holder = party, show_owner = party)
        t = {'char2': party}
        if journal_args is not None:
            t.update(journal_args)
        print_journal(t)


def print_people(p):
    names = {
 'Current': 'Current members of AFAL',
 'Former': 'Former members of AFAL',
 'Dead': 'AFAL members deceased in the line of duty',
 'ActiveNPCs': 'People active in the campaign',
 'InactiveNPCs': 'People who no longer interact with AFAL',
 'DeadNPCs': 'People who died and might stay that way' }
    people = afal.get_characters(p)
    if len(people) > 1:
        if p in names:
            text = names[p]
        else:
            text = "People"
        if afal_config.text:
            header = '\n        {n} {text}\n'
            trailer = ''
        else:
            header = '<h1>{n} {text}</h1>'
            trailer = '<hr />'
        afal.pw(header.format(n = len(people), text = text), **fmt)
    for char in people:
        print_char(char, verbose = False)
    if len(people) > 1:
        afal.pw(trailer, **fmt)


#############################################################################


parser = argparse.ArgumentParser('Generate a report')
parser.add_argument('--character', '-c', nargs='*', default=[], help='report on these characters')
parser.add_argument('--items', '-i', nargs='*', default = [], help='display sepecified item type(s)')
parser.add_argument('--journal', '-j', default=None, help='journal on this character')
parser.add_argument('--members', '-m', nargs='*', default = [], help='display members of the specified group(s)')
parser.add_argument('--note', '-n', default = False, action='store_true', help='display note entries for items')
parser.add_argument('--party', '-p', nargs='*', default = [], help='report on these parties')
parser.add_argument('--width', '-w', type=int, default=130, help='width to wrap at')
args = parser.parse_args()
journal_args = None

if afal_config.text:
    fmt = { 'max': args.width, 'indent': 4 }
    fmt_neol = { 'max': args.width, 'indent': 4, 'end':'' }
    fmt_neol_pad20 = { 'max': args.width, 'indent': 0, 'pad': 25, 'end':'' }
    fmt_nsep = { 'max': args.width, 'indent': 4, 'sep':'' }
    fmt_section_header = { 'max': args.width, 'prefix': 30, 'sep':'' }
    fmt_group_header = { 'max': args.width, 'prefix': 12, 'sep':'' }
    title = ''
    if args.journal is not None:
        journal_args = eval(args.journal)
        args.journal = True
    if len(args.character) == 0 and len(args.party) == 0 and \
 len(args.items) == 0 and args.journal is None and \
 len(args.members) == 0:
        args.character = ['All']
        args.party = ['All']
        args.journal = True
        args.items = ['Unresolved', 'Party', 'Sell', 'Auction', 'Identify', 'Lent']
        args.members = ['Current', 'Former', 'Dead', 'ActiveNPCs',
 'InactiveNPCs', 'DeadNPCs']
    trailer = ''
else:
    fmt = { }
    fmt_neol = { 'end': '' }
    fmt_neol_pad20 = { 'end': '' }
    fmt_nsep = { 'sep': '' }
    fmt_section_header = { 'sep':'' }
    fmt_group_header = { 'sep':'' }
    cgitb.enable()
    form = cgi.FieldStorage()
    title = "Who knows what?"
    j = {}
    js = form.getfirst('start')
    if js is not None and js.lower() != 'all':
        j['starting_on'] = js
    je = form.getfirst('end')
    if je is not None and je.lower() != 'all':
        j['up_to'] = je
    jc = form.getfirst('char')
    if jc is not None and jc.lower() != 'char.all' and len(jc)>5 and jc[0:5] == 'char.':
        j['char'] = jc[5:]
    if len(j) > 0:
        journal_args = j
    for todo in form.getlist('todo'):
        if len(todo)>5 and todo[0:5] == 'char.':
            args.character.append(todo[5:])
            if len(args.character)> 1 or todo == 'char.All':
                title = 'AFAL Multi-Character Report'
            else:
                title = todo[5:]
        elif len(todo)>6 and todo[0:6] == 'party.':
            args.party.append( todo[6:] )
            if len(args.party) > 1 or todo == 'party.All':
                title = 'AFAL Multi-Party Report'
            else:
                title = todo[6:]
        elif len(todo)>6 and todo[0:6] == 'items.':
            args.items.append(todo[6:])
            if len(args.items) > 1:
                title = 'Items'
            else:
                title = args.items[0]+' Items'
        elif len(todo)>7 and todo[0:7] == 'people.':
            args.members.append(todo[7:])
            tmp = {'people.All': 'All People',
 'people.Current': 'Current AFAL Members',
 'people.Former': 'Former AFAL Members',
 'people.Dead': 'Deceased AFAL Members',
 'people.ActiveNPCs': 'NPCs We May Meet Again',
 'people.InactiveNPCs': 'NPCs We Are Unlikely To Meet Again',
 'people.DeadNPCs': 'NPCs We Have Killed'}
            if len(args.members) == 1 and todo in tmp:
                title = tmp[todo]
            else:
                title = 'People'
        elif todo == 'Journal':
            args.journal = True
            if jc is not None and jc != 'All':
                title = jc + ' Transaction Journal Report'
            else:
                title = 'AFAL Transaction Journal Report'
        else:
            title = 'Everything'
            args.character = afal.character_list
            args.party = afal.party_list
            args.journal = True
            args.items = ['Unresolved', 'Party', 'Sell', 'Auction', 'Identify', 'Lent']
            args.members = ['Current', 'Former', 'Dead', 'ActiveNPCs', 'InactiveNPCs', 'DeadNPCs']
    afal.pw(afal.html_header.format(title = title, add_menu = ''), **fmt)
    trailer = \
 '   <br><b><a href="{menu_url}">Return to Menu</a></b><br>\n'\
 '  </center>\n'\
 ' </body>\n'\
 '</html>\n'


if args.character:
    print_full_character(args.character)

if args.party:
    print_full_party(args.party)

if args.journal:
    print_journal(journal_args, show_sub = True)

if args.items:
    for i in args.items:
        items = afal.get_items(i)
        if len(items) > 0:
            print_items(items, i, show_note = True, show_finder = True, show_owner = True, show_holder = True)

if args.members:
    for i in args.members:
        print_people(i)

afal.pw(trailer.format(menu_url = afal_config.menu_url), **fmt)
afal.fini()
