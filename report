#!/usr/bin/python
# This can be used as either a cgi program or from the command line
from __future__ import print_function
import argparse
import afal
import cgi
import cgitb
import re


def format_share(s):
    if s == int(float(s)):
        return str(int(s))
    s = str(s)
    if len(s) > 2 and s[-2:] == '.0':
        return s[:-2]
    return s

def format_plural(n, s, p = None):
    """if len(n) is 1, return a singular string, else a plural one"""

    if type(n) is not int and type(n) is not float and type(n) is not str:
        n = len(n)
    if n == 1:
        return '1 ' + s
    elif p is None:
        return str(n) + ' ' + s + 's'
    else:
        return str(n) + ' ' + p

def format_date(d):
    if d is None:
        return None
    if type(d) == int:
        d = afal.date_to_str(d)
    if args.text:
        return d
    else:
        l = re.sub(' Festival', '', d)
        l = re.sub(' ', '_', l)
        return '<a href="/logs/log_' + l + '.html">' + d + '</a>'

def format_party(p):
    if args.text:
        return p
    else:
        return '<a href="report.cgi?party=' + p + '&generate=Party">' + p + '</a>'

def format_character(c):
    if args.text:
        return c
    else:
        return '<a href="report.cgi?char=' + c + '&generate=Character">' + c + '</a>'

def party_to_log(p):
    return '<a href="/logs/log_' + re.sub(r'([^-]*-)?([^-]+)-(Festival|[0-9]+)[A-Za-z]?-([^-]+)', r'\2_\3_\4', p) + '.html">'

def format_item(i, party = None):
    if args.text:
        return i
    else:
        if party is None:
            tmp = afal.get_item_data(i)
            party = tmp['finder']
        return party_to_log(party) + i + '</a>'

def fmt_date(m):
    return format_date(m.group(1))

def munge_html(s):
    if s is None:
        return ''
    ret = s
    if args.text:
        ret = re.sub(r'&frac12;', ' 1/2', ret)
        ret = re.sub(r'&frac14;', ' 1/4', ret)
        ret = re.sub(r'&quot;', '"', ret)
        ret = re.sub(r'&apos;', "'", ret)
        ret = re.sub(r'&amp;', '&', ret)
        ret = re.sub(r'</?i>', '', ret)
        ret = re.sub(r'</?sup>', '', ret)
        ret = re.sub(r'</?a[^>]*>', '', ret)
        ret = re.sub(r'<br>', '\n', ret)
    ret = re.sub(r'<d ([^>]*)>', fmt_date, ret)
    return ret

#############################################################################

def print_char(data, verbose = False):
    al = munge_html(data['alignment'])
    if al == '':
        al = 'Unknown Alignment'
    ass = munge_html(data['association'])
    cl = munge_html(data['class'])
    if cl == '':
        cl = 'Unknown Class'
    fn = data['fullname']
    if fn is None:
        fn = data['name']
    else:
        fn = munge_html(fn)
    gn = munge_html(data['gender'])
    if gn == '':
        gn = 'Unknown Gender'
    ra = munge_html(data['race'])
    if ra == '':
        ra = 'Unknown Race'
    st = munge_html(data['status'])
    eq = munge_html(data['equipment'])
    ct = munge_html(data['characteristics'])
    no = munge_html(data['note'])
    if data['player'] is None:
        pl = ''
        bg = '/back3l15.gif'
    else:
        pl = ' (' + munge_html(data['player']) + ')'
        bg = '/back3l16.gif'
    if args.text:
        f = { 'header': '', 'characteristics': '  Characteristics:  {ct}', 'equipment': '  Equipment:  {eq}', 'notes': '  Note:  {no}', 'table_end': '', 'cash': '  Cash: {cash}\n' }
        if verbose:
            f['header'] = '\n{name}\n'
        line = '  {fn}{pl}  {ass}  {st}  {ra} {gn}  {cl}  {al}'
        pu = None
    else:
        f= { 'equipment': '  <tr><td colspan="3"><u>Equipment:</u>  {eq}</td>',
 'notes': '   <tr><td colspan="3"><u>Notes:</u>  {no}   </td></tr>',
 'characteristics': '  <tr><td colspan="3"><u>Characteristics:</u>  {ct}  </td></tr>',
 'table_end': '</table>', 'cash': '<h3>Cash {cash}</h3>' }
        if verbose:
            f['header'] = '<hr /><h2><b>{name}</b></h2>'
        else:
            f['header'] = ''
        f['header'] += '<table border="border" width="90%" background="{bg}">'
        line = '   <tr><td width="40%"><a name="{na}"><b>{fn}{pl}</b></a></td>'\
 '<td width="20%">{ra} {gn}</td><td width="20%">{cl}</td><td width="20%">{al}</td></tr>'
        if eq == '':
            eq = 'Unknown'
        if ct == '':
            ct = 'Forgotten'
        if no == '':
            no = 'None'
        pu = data.get('picture_url')

    print(f['header'].format(name=data['name'], bg=bg))
    print(line.format(na = data['name'], fn = fn, pl = pl, ass = ass, st = st, ra=ra,
gn=gn, cl=cl, al=al ))
    if eq != '':
        print(f['equipment'].format(eq = eq))
    if not args.text:
        if pu:
            print('<td colspan="1" rowspan="3" align="center" valign="center" background="{bg}">'.format(bg=bg))
            if data['large_picture_url'] is not None:
                print('  <a href="/{lp}"><img src="/{pu}" alt="{fn}"</a>'.format(lp = data['large_picture_url'], pu=pu, fn=fn))
            else:
                print('  <img src="/{pu}" alt="{fn}" align="left"></td>'.format(pu = pu, fn=fn))
        print('</tr>')

    if ct != '':
        print(f['characteristics'].format(ct = ct))
    if no != '':
        print(f['notes'].format(no = no))
    print(f['table_end'])
    if verbose:
        cash = data['cash_cp']
        if cash:
            print(f['cash'].format(cash = afal.cp_to_str(cash)))


def print_parties(parties):
    needshare = False
    for i in parties:
        if i[1] != 1.0:
            needshare = True
            break
    if args.text:
        header = '  {text}'
        lines = ('    {text}{share}', '   {text}{share}', '   {text}{share}', '   {text}{share}\n')
        nlines = len(lines)
        line_share_1 = ''
        line_share_n = ' for {share} share'
        trailer = ''
        share = ''
    elif needshare:
        line_share_1 = '{share}'
        line_share_n = '{share}'
        lines = ('<tr><td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td></tr>\n')
        nlines = len(lines)
        header = '<hr /><h3>{text}</h3><table border=1><tr>' + \
 (nlines-1) * '<th>Party</th><th>Share</th><th>|</th>' + '<th>Party</th><th>Share</th></tr>'
        trailer = '</table><br>'
    else:
        lines = ('<tr><td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td></tr>\n')
        nlines = len(lines)
        header = '<hr /><h3>{text}</h3><table border=1><tr><th colspan="{nlines}">Party</th></tr>'
        trailer = '</table><br>'
        share = ''
    print(header.format(text = format_plural(parties, 'Party', 'Parties'), nlines = nlines))
    n = 0
    for i in parties:
        if needshare:
            if i[1] == 1:
                share = line_share_1.format(share = format_share(i[1]))
            else:
                share = line_share_n.format(share = format_share(i[1]))
        line = lines[n%nlines]
        print(line.format(text = format_party(i[0]), share = share), end = '')
        n += 1
    while n % nlines != 0:
        line = lines[n%nlines]
        print(line.format(text='', share=''), end='')
        n += 1
    print(trailer)


def print_debt(l, tf, p):
    s = 0
    d={}
    needorder = False
    needshare = False
    needinitial = False
    for i in l:
        s += i['amount_cp']
        ch = i[tf]
        if ch not in d:
            d[ch] = {'sum':0, 'n':0}
        d[ch]['sum'] += i['amount_cp']
        n = d[ch]['n']
        d[ch][n] = {}
        d[ch][n]['amount_cp'] = afal.cp_to_str(i['amount_cp'])
        d[ch][n]['date'] = format_date(i['date'])
        d[ch][n]['order'] = str(i['order'])
        if i['order'] != 0:
            needorder = True
        if i['share'] != 1.0:
            needshare = True
            d[ch][n]['share'] = format_share(i['share'])
        else:
            d[ch][n]['share'] = '1'
        if i['item'] is not None:
            d[ch][n]['item'] = i['item']
        d[ch][n]['initial_cp'] = afal.cp_to_str(i['initial_cp'])
        if i['initial_cp'] != i['amount_cp']:
            needinitial = True
        n += 1
        d[ch]['n'] = n

    hdr_initial = ''
    hdr_share = ''
    hdr_order = ''
    if args.text:
        header = '  {text}'
        trailer = ''
    else:
        header = '<hr /><h3>{text}</h3><table border="1"><tr><th>Who</th><th>Date</th><th>Amount</th>{hdr_initial}{hdr_share}{hdr_order}<th>Item</th></tr>'
        trailer = '</table>'
        if needinitial:
            hdr_initial = '<th>Initial</th>'
        if needshare:
            hdr_share = '<th>Share</th>'
        if needorder:
            hdr_order = '<th>Order</th>'
    text = format_plural(l, p + ' Debt') + ' (Total ' + afal.cp_to_str(s) + ')'
    print(header.format(text = text, hdr_initial = hdr_initial, hdr_share = hdr_share, hdr_order = hdr_order))
    k = d.keys()
    k.sort()
    for i in k:
        if args.text:
            if d[i]['n']>1:
                print('    ', i, ' Total ', afal.cp_to_str(d[i]['sum']), sep='')
            else:
                print('    ', i, sep='')
            for j in range(d[i]['n']):
                initial = '' if d[i][j]['initial_cp'] == d[i][j]['amount_cp'] else ' of ' + d[i][j]['initial_cp']
                order = '' if d[i][j]['order'] == '0' else ' repay order ' + d[i][j]['order']
                share = '' if d[i][j]['share'] == '1' else ' for ' + d[i][j]['share'] + ' share'
                item = '' if 'item' not in d[i][j] else  ' for ' + format_item(d[i][j]['item'])
                print('      ', d[i][j]['date'], '  ', d[i][j]['amount_cp'], initial, order, share, item, sep='')
        else:
            for j in range(d[i]['n']):
                if d[i]['n'] > 1 and j == 0:
                    print('<tr><td rowspan="', str(d[i]['n']), '">',
 format_character(i), ' (', str(d[i]['n']), ' Total ', afal.cp_to_str(d[i]['sum']), ')</td>', sep='')
                elif j == 0:
                    print('<tr><td>', format_character(i), '</td>', sep='', end='')
                else:
                    print('<tr>', end='')

                print('<td>', d[i][j]['date'], '</td><td>', d[i][j]['amount_cp'], '</td>', sep='', end='')
                if needinitial:
                    print('<td>', d[i][j]['initial_cp'], '</td>', sep='', end='')
                if needshare:
                    print('<td>', d[i][j]['share'], '</td>', sep='', end='')
                if needorder:
                    print('<td>', d[i][j]['order'], '</td>', sep='', end='')
                print('<td>', '' if 'item' not in d[i][j] else format_item(d[i][j]['item']), '</td></tr>', sep='')
            print('</tr>')
    print(trailer)


def get_item_entry(ind, i, f, func):
    var = i.get(ind)
    if var:
        return (func(var), f[ind+'_pre_pos'])
    else:
        return ('', f[ind+'_pre_neg'])


def print_items(items, verb, show_note = False, show_finder = False, show_owner = False,
 show_holder = False):
    k = set()
    for i in items:
        for j in i.keys():
            if i[j] is not None:
               k |= set([j])
    show_note = 'note' in k if show_note else False
#    show_finder = 'finder' in k if show_finder else False
    show_holder = 'holder' in k if show_holder else False
    show_owner = 'owner' in k if show_owner else False
    show_value = 'value_cp' in k
    show_date_xfrd = 'date_xfrd' in k

    if args.text:
        f = {'header_pre': '  ',
 'item_hdr':      '',      'item_pre': '    ',
 'note_hdr':      '',      'note_pre_pos': ',  Note ','note_pre_neg': '',
 'value_hdr':     '',     'value_cp_pre_pos': ',  Value ', 'value_cp_pre_neg': '',
 'finder_hdr':    '',    'finder_pre_pos': ',  Found by ','finder_pre_neg': '',
 'owner_hdr':     '',     'owner_pre_pos': ',  Owned by ','owner_pre_neg': '',
 'holder_hdr':    '',    'holder_pre_pos': ',  Held by ','holder_pre_neg': '',
 'date_xfrd_hdr': '', 'date_xfrd_pre_pos': ',  Transferred on ','date_xfrd_pre_neg': '',
 'header_suf': '',
 'entry_suf': '', 'trailer': ''}
    else:
        f = {'header_pre': '<hr /><h3>',
 'item_hdr':      '</h3><table border="1"><tr><th>Item</th>', 'item_pre':'<tr><td>',
 'note_hdr':      '<th>Note</th>',             'note_pre_pos':      '</td><td>','note_pre_neg':      '</td><td>',
 'value_hdr':     '<th>Value</th>',            'value_cp_pre_pos': '</td><td>','value_cp_pre_neg': '</td><td>',
 'finder_hdr':    '<th>Found by</th>',         'finder_pre_pos':    '</td><td>','finder_pre_neg':    '</td><td>',
 'owner_hdr':     '<th>Owned by</th>',         'owner_pre_pos':     '</td><td>','owner_pre_neg':     '</td><td>',
 'holder_hdr':    '<th>Held by</th>',          'holder_pre_pos':    '</td><td>','holder_pre_neg':    '</td><td>',
 'date_xfrd_hdr': '<th>Date Transferred</th>', 'date_xfrd_pre_pos': '</td><td>', 'date_xfrd_pre_neg': '</td><td>',
 'header_suf': '</tr>',
 'entry_suf': '</td></tr>',
 'trailer': '</table><br>'}

    if not show_note:
        f['note_hdr'] = ''
        f['note_pre'] = ''
        note = ''
    if not show_value:
        f['value_hdr'] = ''
        f['value_pre'] = ''
        value = ''
    if not show_finder:
        f['finder_hdr'] = ''
        f['finder_pre'] = ''
        finder = ''
    if not show_owner:
        f['owner_hdr'] = ''
        f['owner_pre'] = ''
        owner = ''
    if not show_holder:
        f['holder_hdr'] = ''
        f['holder_pre'] = ''
        holder = ''
    if not show_date_xfrd:
        f['date_xfrd_hdr'] = ''
        f['date_xfrd_pre'] = ''
        date_xfrd = ''
    if verb == 'All':
        verb = ''
    elif verb != '':
        verb += ' '
    print('{f[header_pre]}{items}{f[item_hdr]}{f[note_hdr]}{f[value_hdr]}{f[finder_hdr]}'\
 '{f[owner_hdr]}{f[holder_hdr]}{f[date_xfrd_hdr]}{f[header_suf]}'\
.format(f=f, items=format_plural(items, verb + 'Item')))
    for i in items:
        item = format_item(i['item'], party = i['finder'])
        if show_note:
            (note, f['note_pre']) = get_item_entry('note', i, f, munge_html)
        if show_value:
            (value, f['value_pre']) = get_item_entry('value_cp', i, f, afal.cp_to_str)
        if show_finder:
            (finder, f['finder_pre']) = get_item_entry('finder', i, f, format_party)
        if show_owner:
            if args.text and i['finder'] == i['owner']:
                owner = ''
                f['owner_pre'] = ''
            else:
                (owner, f['owner_pre']) = get_item_entry('owner', i, f, format_party)
        if show_holder:
            if args.text and i['owner'] == i['holder']:
                holder = ''
                f['holder_pre'] = ''
            else:
                (holder, f['holder_pre']) = get_item_entry('holder', i, f, format_character)
        if show_date_xfrd:
            (date_xfrd, f['date_xfrd_pre']) = get_item_entry('date_xfrd', i, f, format_date)
        print('{f[item_pre]}{item}' \
 '{f[note_pre]}{note}' \
 '{f[value_pre]}{value}' \
 '{f[finder_pre]}{finder}' \
 '{f[owner_pre]}{owner}' \
 '{f[holder_pre]}{holder}' \
 '{f[date_xfrd_pre]}{date_xfrd}' \
 '{f[entry_suf]}'.format(f=f, item=item, note=note, value=value, finder=finder,
 owner=owner, holder=holder,date_xfrd=date_xfrd))
    print('{f[trailer]}'.format(f=f))


def print_journal(j, show_sub = False):
    sub_hdr = ''
    sub = ''
    if args.text:
        header = '  {text}'
        line = '    {date} {sub} {text}'
        pri_fmt = ' {pri:>4}      '
        sub_fmt = ' {pri:>4}^{sub:<4} '
        trailer = ''
    else:
        header = '<hr /><h3>{text}</h3><table border="1"><tr><th>Date</th>{sub_hdr}<th>Entry</th></tr>'
        if show_sub:
            sub_hdr = '<th>Sub</th>'
        line = '<tr><td>{date}</td>{sub}<td>{text}</td></tr>'
        pri_fmt = '<td>{pri:>}</td>'
        sub_fmt = '<td>{pri:>}:<font color="green">{sub:<}</font></td>'
        trailer = '</table><br>'

    print(header.format(text = format_plural(j, 'Transaction Journal Entry',
 'Transaction Journal Entries'), sub_hdr = sub_hdr))
    for e in j:
        if show_sub:
            if e['part_of'] is None:
                sub = pri_fmt.format(pri= str(e['journal_id']-1000000))
            else:
                sub = sub_fmt.format(sub =  str(e['journal_id']-1000000), pri = str(e['part_of']-1000000))
        print(line.format(date = format_date(e['date']), text=e['description'], sub = sub))
    print(trailer)

def print_full_character(c):
    if c == ['All']:
        c = character_list
    if len(c) > 1:
        if args.text:
            header = '        {characters}\n'
        else:
            header = '<hr size="3"/><h1>{characters}</h1><br>'
        print(header.format(characters = format_plural(c, 'Character')))
    for char in c:
        data = afal.get_char_data(char)
        print_char(data, verbose = True)
        cparties = afal.get_char_parties(char)
        if len(cparties):
            print_parties(cparties)
        items = afal.get_items('Held_by', char)
        if len(items):
            print_items(items, '', show_note = args.note, show_finder = True, show_owner = True)
        receivable = afal.get_char_debts(char, 'Receivable')
        if len(receivable):
            print_debt(receivable, 'by', 'Receivable')
        payable = afal.get_char_debts(char, 'Payable')
        if len(payable):
            print_debt(payable, 'to', 'Payable')
# was primary=True
        j = afal.get_journal(character=char)
        if len(j):
            print_journal(j)


def print_members(members):
    shares = sum(members.values())
    h = {}
    needshare = False
    for char in members:
        share = members[char]
        if share != 1:
            needshare = True
        h[char] = format_share(share)

    if args.text:
        header = '  {text}{shares}'
        lines = ('    {text}{share}', '  {text}{share}', '  {text}{share}', '  {text}{share}\n')
        nlines = len(lines)
        share_text = ' for {share} share'
        noshare_text = ''
        trailer = ''
        share = ''
    elif needshare:
        lines = ('<tr><td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td></tr>\n')
        nlines = len(lines)
        header = '<h3>{text}{shares}</h3><br><table border="1"><tr>' + \
 (nlines-1) * '<th>Member</th><th>Share</th><th>|</th>' + '<th>Member</th><th>Share</th></tr>'
        share_text = '{share}'
        noshare_text = '1'
        trailer = '</table><br>'
    else:
        header = '<h3>{text}{shares}</h3><br><table border="1"><tr><th colspan="{nlines}">Member</th></tr>'
        lines = ('<tr><td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td></tr>\n')
        nlines = len(lines)
        trailer = '</table><br>'

    if shares != len(members):
        shares = ', ' + format_plural(format_share(shares), 'Share')
    else:
        shares = ''

    print(header.format(text = format_plural(members, 'Member'), shares = shares, nlines = nlines))
    k = h.keys()
    k.sort()
    n = 0
    for i in k:
        line = lines[n%nlines]
        if needshare:
            share = h[i]
            if share != 1:
                share = share_text.format(share = share)
            else:
                share = noshare_text
        print(line.format(text = format_character(i), share=share), end='')
        n += 1
    while n % nlines != 0:
        line = lines[n%nlines]
        print(line.format(text='', share=''), end='')
        n += 1
    print(trailer)

def print_full_party(p):
    if p == ['All']:
        p = party_list
    if len(p) > 1:
        if args.text:
            header = '\n        {text}\n'
        else:
            header = '<hr size="3"/><h1>{text}</h1>'
        print(header.format(text = format_plural(p, 'Party', 'Parties')))
    for party in p:
        data = afal.get_party_data(party)
        note = data.get('note')
        if not note:
            note = ''
        if args.text:
            print(party)
            print(data['type'], afal.date_to_str(data['date']), note)
        else:
            print("<hr /><h2><b>", party_to_log(party), party, "</a></b></h2><br>", sep='')
            print(data['type'], format_date(afal.date_to_str(data['date'])), note)

        members = data['members']
        if len(members):
            print_members(members)

        items = afal.get_items('Found_by', party)
        if len(items):
            print_items(items, 'Found', show_note = True, show_finder = False, show_holder = True, show_owner = True)


def print_people(p):
    people = afal.get_characters(p)
    if len(people) > 1:
        if args.text:
            header = '\n        {text}\n'
        else:
            header = '<hr size="3"/><h1>{text}</h1>'
        print(header.format(text = format_plural(people, p + ' Person', p + ' People')))
    for char in people:
        print_char(afal.get_char_data(char), verbose=False)


#############################################################################
parser = argparse.ArgumentParser('Generate a report')
parser.add_argument('--text', '-t', action='store_true', default=False, help='text, not CGI')
parser.add_argument('--all', '-a', action='store_true', default=False, help='report on everything')
parser.add_argument('--character', '-c', nargs='*', default=None, help='report on these characters')
parser.add_argument('--items', '-i', nargs='*', help='display sepecified item type(s)')
parser.add_argument('--journal', '-j', nargs=3, default=None, help='journal on this character')
parser.add_argument('--members', '-m', nargs='*', help='display members of the specified group(s)')
parser.add_argument('--note', '-n', default = False, action='store_true', help='display note entries for items')
parser.add_argument('--party', '-p', nargs='*', default=None, help='report on these parties')
args=parser.parse_args()

character_list = afal.get_characters('Current')
party_list = afal.get_parties()
journal_list = afal.get_journal_dates()

if args.text:
    if args.character is not None or args.party is not None or \
 args.items is  not None or args.journal is not None or \
 args.members is not None:
        pass
    else:
        if not args.all:
            print("Dunno what to do")
        args.character = ['All']
        args.party = ['All']
        args.journal = [None, None, None]
        args.items = ['Unresolved', 'Party', 'Sell', 'Auction', 'Identify', 'Lent']
        args.members = ['Current', 'Former', 'Dead', 'ActiveNPCs', 'InactiveNPCs', 'DeadNPCs']
    trailer = ''
else:
    cgitb.enable()
    form = cgi.FieldStorage()
    todo = form.getfirst('generate', None)
    if todo == 'Character':
        hdr_type = 'Character Report'
        args.character = form.getlist('char')
    elif todo == 'Party':
        hdr_type = 'Party Report'
        args.party = form.getlist('party')
    elif todo == 'Journal':
        hdr_type = 'Transaction Journal Report'
        args.journal = [form.getfirst('journal_start'), form.getfirst('journal_end'), form.getfirst('journal_character')]
    elif todo == 'Items':
        hdr_type = 'List of Items'
        args.items = form.getlist('item_type')
    elif todo == 'Group':
        hdr_type = 'List of People'
        args.members = form.getlist('members')
    elif args.all:
        hdr_type = 'Report on Everything'
        args.character = character_list
        args.party = party_list
        args.journal = [None, None, None]
        args.items = ['Unresolved', 'Party', 'Sell', 'Auction', 'Identify', 'Lent']
        args.members = ['Current', 'Former', 'Dead', 'ActiveNPCs', 'InactiveNPCs', 'DeadNPCs']
    else:
        hdr_type = 'Report Menu'
    print(
 'Content-Type: text/html\n'
 '\n'
 '<html>\n'
 ' <head><title>AFAL {hdr_type}</title></head>\n'
 ' <body background="/back3l07.gif">\n'
 '  <center>\n'
 '    <b>Select a character:</b>\n'
 '    <form action="report.cgi" method="GET">\n'
 '      <select name="char">\n'
 '        <option value="All">All</option>'.format(hdr_type = hdr_type))
    for i in character_list:
        print('        <option value="{i}">{i}</option>'.format(i = i))
    print('      </select>\n      <input type="submit" name="generate" value="Character" />\n'
 '    </form>\n    <b>or Select a party:</b>\n    <form action="report.cgi" method="GET">\n'
 '      <select name="party">\n        <option value="All">All</option>')
    for i in party_list:
        print('        <option value="{i}">{i}</option>'.format(i = i))
    print(
 '      </select>\n'
 '      <input type="submit" name="generate" value="Party" />\n'
 '    </form>\n    <b>or Select a journal range</b>\n'
 '    <form action="report.cgi" method="GET">\n'
 '      From <select name="journal_start">\n'
 '        <option value="All">All</option>')
    for i in journal_list:
        print('        <option value="{i}">{i}</option>'.format(i = i))
    print(
 '      </select>\n'
 '      to <select name="journal_end">\n'
 '        <option value="All">All</option>')
    for i in journal_list:
        print('        <option value="{i}">{i}</option>'.format(i = i))
    print(
 '      </select>\n'
 '      involving <select name="journal_character">\n'
 '        <option value="All">All</option>')
    for i in character_list:
        print('        <option value="{i}">{i}</option>'.format(i = i))
    print(
 '      </select>\n'
 '      <input type="submit" name="generate" value="Journal" />\n'
 '       </form>\n'
 '    <b>or Select items</b>\n'
 '    <form action="report.cgi" method="GET">\n'
 '      <select name="item_type">\n'
 '        <option value="All">All</option>\n'
 '        <option value="Unresolved">Unresolved</option>\n'
 '        <option value="Party">Party</option>\n'
 '        <option value="Sell">to Sell</option>\n'
 '        <option value="Auction">to Auction</option>\n'
 '        <option value="Identify">to Identify</option>\n'
 '        <option value="Lent">Lent out</option>\n'
 '      </select>\n'
 '      <input type="submit" name="generate" value="Items"/>\n'
 '    </form>\n'
 '    <b>or Select a group</b>\n'
 '    <form action="report.cgi" method="GET">\n'
 '      <select name="members">\n'
 '        <option value="All">All</option>\n'
 '        <option value="Current">Current AFAL members</option>\n'
 '        <option value="Former">Former AFAL members</option>\n'
 '        <option value="Dead">Dead AFAL members (in memorium)</option>\n'
 '        <option value="ActiveNPCs">Active NPCs</option>\n'
 '        <option value="InactiveNPCs">Inactive NPCs</option>\n'
 '        <option value="DeadNPCs">NPCs we have kiled</option>\n'
 '      </select>\n'
 '      <input type="submit" name="generate" value="Group"/>\n'
 '    </form>')
    trailer = \
 '  </center>\n'\
 ' </body>\n'\
 '</html>\n'


if args.character:
    print_full_character(args.character)

if args.party:
    print_full_party(args.party)

if args.journal:
    j = afal.get_journal(args.journal[0], args.journal[1], args.journal[2])
    if len(j) > 0:
        print_journal(j, show_sub = True)

if args.items:
    for i in args.items:
        items = afal.get_items(i)
        if len(items) > 0:
            print_items(items, i, show_note = True, show_finder = True, show_owner = True, show_holder = True)

if args.members:
    for i in args.members:
        print_people(i)

print(trailer)
afal.fini()
