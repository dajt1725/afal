#!/usr/bin/python
# This can be used as either a cgi program or from the command line
from __future__ import print_function
import argparse
import afal_config
import afal
import cgi
import cgitb
import re


def format_share(s):
    if s == int(float(s)):
        return str(int(s))
    return str(s)

def format_plural(n, s, p = None):
    """if len(n) is 1, return a singular string, else a plural one"""

    if type(n) is not int and type(n) is not float and type(n) is not str:
        n = len(n)
    if n == 1:
        f = '{n} {s}'
    elif p is None:
        f = '{n} {s}s'
    else:
        f = '{n} {p}'
    return f.format(n = n, s = s, p = p)

def format_date_log(d):
    if d is None:
        return None
    if type(d) == int:
        d = afal.date_to_str(d)
    if afal_config.text:
        return d
    else:
        l = re.sub(' Festival', '', d)
        l = re.sub(' ', '_', l)
        return '<a href="{logs}{l}.html">{d}</a>'.format(logs = afal_config.logs,
 l = l, d = d)

def format_date(d):
    if d is None:
        return None
    if type(d) == int:
        d = afal.date_to_str(d)
    if afal_config.text:
        return d
    if d in afal.date_list:
        return '<a href="{report}?journal=Show&start=date.{d}&end=date.{d}">{d}</a>'.format(
 report = afal_config.report, d = d)
    l = re.sub(' Festival', '', d)
    l = re.sub(' ', '_', l)
    return '<a href="{logs}{l}.html">{d}</a>'.format(logs = afal_config.logs,
 l = l, d = d)

def format_party(p):
    if afal_config.text:
        return p
    elif afal.get_party_data(p)['type'] == 'Character':
        return '<a href="{report}?generate=Show&todo=char.{p}">{p}</a>'.format(
 report = afal_config.report, p = p)
    else:
        return '<a href="{report}?generate=Show&todo=party.{p}">{p}</a>'.format(
 report = afal_config.report, p = p)

def format_character(c):
    if afal_config.text:
        return c
    else:
        return '<a href="{report}?generate=Show&todo=char.{c}">{c}</a>'.format(
 report = afal_config.report, c = c)

def party_to_log(p):
    return '<a href="{logs}{l}.html">'.format(logs = afal_config.logs, l = re.sub(r'([^-]*-)?([^-]+)-(Festival|[0-9]+)[A-Za-z]?-([^-]+)', r'\2_\3_\4', p))

def format_item(i, party = None):
    if afal_config.text:
        return i
    else:
        if party is None:
            tmp = afal.get_item_data(i)
            party = tmp['finder']
        return party_to_log(party) + i + '</a>'

def fmt_date(m):
    return format_date(m.group(1))

def munge_html(s):
    if s is None:
        return ''
    ret = s
    if afal_config.text:
        ret = re.sub(r'&frac12;', r' 1/2', ret)
        ret = re.sub(r'&frac14;', r' 1/4', ret)
        ret = re.sub(r'&quot;', r'"', ret)
        ret = re.sub(r'&apos;', r"'", ret)
        ret = re.sub(r'&amp;', r'&', ret)
        ret = re.sub(r'<p>(.*?)</p>', '\\1\n  ', ret)
        ret = re.sub(r'</?i>', r'', ret)
        ret = re.sub(r'</?sup>', r'', ret)
        ret = re.sub(r'</?a[^>]*>', r'', ret)
        ret = re.sub(r'<br>', '\n  ', ret)
    ret = re.sub(r'<d ([^>]*)>', fmt_date, ret)
    return ret

#############################################################################

def print_char(char, verbose = False):
    d = afal.get_char_data(char)
    for i in ('alignment', 'association', 'characteristics', 'class',
 'equipment', 'fullname', 'gender', 'name', 'note', 'player', 'race',
 'status'):
        d[i[0:2]] = munge_html(d[i])
    if d['al'] == '':
        d['al'] = 'Unknown Alignment'
    if d['cl'] == '':
        d['cl'] = 'Unknown Class'
    if d['ge'] == '':
        d['ge'] = 'Unknown Gender'
    if d['ra'] == '':
        d['ra'] = 'Unknown Race'
    if d['fu'] == '':
        d['fu'] = d['na']
    if d['pl'] == '':
        d['pl'] = d['fu']
        d['bg'] = afal_config.background_npc
    else:
        d['pl'] = '{fu} ({pl})'.format(fu = d['fu'], pl = d['pl'])
        d['bg'] = afal_config.background_pc

    if afal_config.text:
        f = (
 '\n\n{na}\n',
 '  {pl}  {as}  {st}  {ra} {ge}  {cl}  {al}',
 '  Characteristics:  {ch}',
 '  Equipment:  {eq}',
 '  Note:  {no}',
 '',
 '  Cash: {ca}',
 '  Coins: {n} {name}',
 ', {n} {name}',
 '\n' )
    else:
        f= (
 '  <h2><b>{na}</b></h2>',
 '  <table border="border" width="95%" background="{bg}">\n'
 '   <tr><td width="{nw}%"><a name="{na}"><b>{pl}</b></a></td>'\
 '{st}{as}<td width="{mw}%">{ra} {ge}</td><td width="{mw}%">{cl}</td>'\
 '<td width="{mw}%">{al}</td></tr>',
 '   <tr><td colspan="{n}"><u>Characteristics:</u>  {ch}  </td>{pu}</tr>',
 '   <tr><td colspan="{n}"><u>Equipment:</u>  {eq}</td></tr>',
 '   <tr><td colspan="{n}"><u>Notes:</u>  {no}   </td></tr>',
 '  </table>',
 '<h3>Cash {ca}</h3>',
 '<h4>Coins: {n} {name}',
 ', {n} {name}',
 '</h4><hr />')
        if d['eq'] == '':
            d['eq'] = 'Unknown'
        if d['ch'] == '':
            d['ch'] = 'Forgotten'
        if d['no'] == '':
            d['no'] = 'None'
        pu = d.get('picture_url')
        if pu:
            if d['large_picture_url'] is not None:
                pu = '  <a href="/{lp}"><img src="/{pu}" alt="{fu}"</a>'.format(lp = d['large_picture_url'], pu = pu, fu = d['fu'])
            else:
                pu = '  <img src="/{pu}" alt="{fu}"></td>'.format(pu = pu, fu = d['fu'])
            d['pu'] = '<td colspan="1" rowspan="3" align="center" valign="center">{pu}</td>'.format(pu = pu)
        else:
            d['pu'] = ''
        if d['as'] == 'AFAL':
            d['nw'] = 40
            d['st'] = ''
            d['n'] = 3
            d['mw'] = 20
            d['as'] = ''
        else:
            if pu:
                 d['n'] = 4
            else:
                 d['n'] = 5
            if verbose:
                d['nw'] = 30
                d['st'] = '<td width="10%">{st}</td>'.format(**d)
                d['n'] += 1
            else:
                d['nw'] = 40
                d['st'] = ''
            d['nw'] = 40
            d['mw'] = 15
            d['as'] = '<td width="{mw}%">{as}</td>'.format(**d)

    if verbose:
        print(f[0].format(**d))
    print(f[1].format(**d))
    if d['ch'] != '':
        print(f[2].format(**d))
    if d['eq'] != '':
        print(f[3].format(**d))
    if d['no'] != '':
        print(f[4].format(**d))
    print(f[5])
    if verbose:
        cash = d['cash_cp']
        if cash:
            print(f[6].format(ca = afal.cp_to_str(cash)))
        if 'coins' in d:
            sep = f[7]
            for i in d['coins']:
                name = i['abbrev'] if 'abbrev' in i else i['coin']
                print(sep.format(n = i['quantity'], name = name), end='')
                sep = f[8]
            print(f[9])

def print_parties(parties):
    needshare = False
    for i in parties:
        if i[1] != 1.0:
            needshare = True
            break
    if afal_config.text:
        header = '  {text}'
        lines = ('    {text}{share}', '   {text}{share}', '   {text}{share}', '   {text}{share}\n')
        nlines = len(lines)
        line_share_1 = ''
        line_share_n = ' for {share} share'
        trailer = ''
        share = ''
    elif needshare:
        line_share_1 = '{share}'
        line_share_n = '{share}'
        lines = ('<tr><td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td></tr>\n')
        nlines = len(lines)
        header = '<h3>{text}</h3><table border=1><tr>' + \
 (nlines-1) * '<th>Party</th><th>Share</th><th>|</th>' + '<th>Party</th><th>Share</th></tr>'
        trailer = '</table><hr />'
    else:
        lines = ('<tr><td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td></tr>\n')
        nlines = len(lines)
        header = '<h3>{text}</h3><table border=1><tr><th colspan="{nlines}">Party</th></tr>'
        trailer = '</table><hr />'
        share = ''
    print(header.format(text = format_plural(parties, 'Party', 'Parties'), nlines = nlines))
    n = 0
    for i in parties:
        if needshare:
            if i[1] == 1:
                share = line_share_1.format(share = format_share(i[1]))
            else:
                share = line_share_n.format(share = format_share(i[1]))
        line = lines[n%nlines]
        print(line.format(text = format_party(i[0]), share = share), end = '')
        n += 1
    while n % nlines != 0:
        line = lines[n%nlines]
        print(line.format(text='', share=''), end='')
        n += 1
    print(trailer)


def print_debt(l, tf, p):
    s = 0
    d={}
    needorder = False
    needshare = False
    needinitial = False
    for i in l:
        s += i['amount_cp']
        ch = i[tf]
        if ch not in d:
            d[ch] = {'sum':0, 'n':0}
        d[ch]['sum'] += i['amount_cp']
        n = d[ch]['n']
        d[ch][n] = {}
        d[ch][n]['amount_cp'] = afal.cp_to_str(i['amount_cp'])
        d[ch][n]['date'] = format_date(i['date'])
        d[ch][n]['order'] = str(i['order'])
        if i['order'] != 0:
            needorder = True
        if i['share'] != 1.0:
            needshare = True
            d[ch][n]['share'] = format_share(i['share'])
        else:
            d[ch][n]['share'] = '1'
        if i['item'] is not None:
            d[ch][n]['item'] = i['item']
        d[ch][n]['initial_cp'] = afal.cp_to_str(i['initial_cp'])
        if i['initial_cp'] != i['amount_cp']:
            needinitial = True
        n += 1
        d[ch]['n'] = n

    hdr_initial = ''
    hdr_share = ''
    hdr_order = ''
    if afal_config.text:
        header = '  {text}'
        trailer = ''
    else:
        header = '<h3>{text}</h3><table border="1"><tr><th>Who</th><th>Date</th><th>Amount</th>{hdr_initial}{hdr_share}{hdr_order}<th>Item</th></tr>'
        trailer = '</table><hr />'
        if needinitial:
            hdr_initial = '<th>Initial</th>'
        if needshare:
            hdr_share = '<th>Share</th>'
        if needorder:
            hdr_order = '<th>Order</th>'
    text = format_plural(l, p + ' Debt') + ' (Total ' + afal.cp_to_str(s) + ')'
    print(header.format(text = text, hdr_initial = hdr_initial, hdr_share = hdr_share, hdr_order = hdr_order))
    k = d.keys()
    k.sort()
    for i in k:
        if afal_config.text:
            if d[i]['n']>1:
                print('    ', i, ' Total ', afal.cp_to_str(d[i]['sum']), sep='')
            else:
                print('    ', i, sep='')
            for j in range(d[i]['n']):
                initial = '' if d[i][j]['initial_cp'] == d[i][j]['amount_cp'] else ' of ' + d[i][j]['initial_cp']
                order = '' if d[i][j]['order'] == '0' else ' repay order ' + d[i][j]['order']
                share = '' if d[i][j]['share'] == '1' else ' for ' + d[i][j]['share'] + ' share'
                item = '' if 'item' not in d[i][j] else  ' for ' + format_item(d[i][j]['item'])
                print('      ', d[i][j]['date'], '  ', d[i][j]['amount_cp'], initial, order, share, item, sep='')
        else:
            initial = ''
            share = ''
            order = ''
            for j in range(d[i]['n']):
                if d[i]['n'] > 1 and j == 0:
                    char = '<td rowspan="{n}">{char} ({n} Total {total})</td>'.format(n=d[i]['n'], char = format_character(i), total = afal.cp_to_str(d[i]['sum']))
                elif j == 0:
                    char = '<td>{char}</td>'.format(char =  format_character(i))
                else:
                    char = ''
                date = d[i][j]['date']
                amount = d[i][j]['amount_cp']
                if needinitial:
                    initial = '<td>{initial}</td>'.format(initial = d[i][j]['initial_cp'])
                if needshare:
                    share = '<td>{share}</td>'.format(share = d[i][j]['share'])
                if needorder:
                    order = '<td>{order}</td>'.format(order = d[i][j]['order'])
                item = format_item(d[i][j]['item']) if 'item' in d[i][j] else ''
                print('<tr>{char}<td>{date}</td><td>{amount}</td>{initial}{share}{order}<td>{item}</td></tr>'.format(
char = char, date = date, amount = amount, initial = initial, share = share, order = order, item = item))
    print(trailer)


def get_item_entry(ind, i, f, func):
    var = i.get(ind)
    if var:
        return (func(var), f[ind+'_pre_pos'])
    else:
        return ('', f[ind+'_pre_neg'])


def print_items(items, verb, show_note = False, show_finder = False, show_owner = False,
 show_holder = False):
    k = set()
    for i in items:
        for j in i.keys():
            if i[j] is not None:
               k |= set([j])
    show_note = 'note' in k if show_note else False
#    show_finder = 'finder' in k if show_finder else False
    show_holder = 'holder' in k if show_holder else False
    show_owner = 'owner' in k if show_owner else False
    show_value = 'value_cp' in k
    show_date_xfrd = 'date_xfrd' in k

    if afal_config.text:
        f = {'header_pre': '  ',
 'item_hdr':      '',      'item_pre': '    ',
 'note_hdr':      '',      'note_pre_pos': ',  Note ','note_pre_neg': '',
 'value_hdr':     '',     'value_cp_pre_pos': ',  Value ', 'value_cp_pre_neg': '',
 'finder_hdr':    '',    'finder_pre_pos': ',  Found by ','finder_pre_neg': '',
 'owner_hdr':     '',     'owner_pre_pos': ',  Owned by ','owner_pre_neg': '',
 'holder_hdr':    '',    'holder_pre_pos': ',  Held by ','holder_pre_neg': '',
 'date_xfrd_hdr': '', 'date_xfrd_pre_pos': ',  Transferred on ','date_xfrd_pre_neg': '',
 'header_suf': '',
 'entry_suf': '', 'trailer': ''}
    else:
        f = {'header_pre': '<h3>',
 'item_hdr':      '</h3><table border="1"><tr><th>Item</th>', 'item_pre':'<tr><td>',
 'note_hdr':      '<th>Note</th>',             'note_pre_pos':      '</td><td>','note_pre_neg':      '</td><td>',
 'value_hdr':     '<th>Value</th>',            'value_cp_pre_pos': '</td><td>','value_cp_pre_neg': '</td><td>',
 'finder_hdr':    '<th>Found by</th>',         'finder_pre_pos':    '</td><td>','finder_pre_neg':    '</td><td>',
 'owner_hdr':     '<th>Owned by</th>',         'owner_pre_pos':     '</td><td>','owner_pre_neg':     '</td><td>',
 'holder_hdr':    '<th>Held by</th>',          'holder_pre_pos':    '</td><td>','holder_pre_neg':    '</td><td>',
 'date_xfrd_hdr': '<th>Date Transferred</th>', 'date_xfrd_pre_pos': '</td><td>', 'date_xfrd_pre_neg': '</td><td>',
 'header_suf': '</tr>',
 'entry_suf': '</td></tr>',
 'trailer': '</table><hr />'}

    if not show_note:
        f['note_hdr'] = ''
        f['note_pre'] = ''
        f['note'] = ''
    if not show_value:
        f['value_hdr'] = ''
        f['value_pre'] = ''
        f['value'] = ''
    if not show_finder:
        f['finder_hdr'] = ''
        f['finder_pre'] = ''
        f['finder'] = ''
    if not show_owner:
        f['owner_hdr'] = ''
        f['owner_pre'] = ''
        f['owner'] = ''
    if not show_holder:
        f['holder_hdr'] = ''
        f['holder_pre'] = ''
        f['holder'] = ''
    if not show_date_xfrd:
        f['date_xfrd_hdr'] = ''
        f['date_xfrd_pre'] = ''
        f['date_xfrd'] = ''
    if verb == 'All' or verb == '':
        verb = 'Item'
    elif verb != '':
        verb += ' Item'
    f['items'] = format_plural(items, verb)
    print('{header_pre}{items}{item_hdr}{note_hdr}{value_hdr}{finder_hdr}'\
 '{owner_hdr}{holder_hdr}{date_xfrd_hdr}{header_suf}'.format(**f))
    for i in items:
        f['item'] = format_item(i['item'], party = i['finder'])
        if show_note:
            (f['note'], f['note_pre']) = get_item_entry('note', i, f, munge_html)
        if show_value:
            (f['value'], f['value_pre']) = get_item_entry('value_cp', i, f, afal.cp_to_str)
        if show_finder:
            (f['finder'], f['finder_pre']) = get_item_entry('finder', i, f, format_party)
        if show_owner:
            if afal_config.text and i['finder'] == i['owner']:
                f['owner'] = ''
                f['owner_pre'] = ''
            else:
                (f['owner'], f['owner_pre']) = get_item_entry('owner', i, f, format_party)
        if show_holder:
            if afal_config.text and i['owner'] == i['holder']:
                f['holder'] = ''
                f['holder_pre'] = ''
            else:
                (f['holder'], f['holder_pre']) = get_item_entry('holder', i, f, format_character)
        if show_date_xfrd:
            (f['date_xfrd'], f['date_xfrd_pre']) = get_item_entry('date_xfrd', i, f, format_date)
        print('{item_pre}{item}{note_pre}{note}{value_pre}{value}' \
 '{finder_pre}{finder}{owner_pre}{owner}{holder_pre}{holder}' \
 '{date_xfrd_pre}{date_xfrd}{entry_suf}'.format(**f))
    print(f['trailer'])


def print_journal(j, show_sub = False):
    sub_hdr = ''
    sub = ''
    if afal_config.text:
        header = '  {text}'
        day_header = '      {date}'
        line = '    {sub} {by} {text}'
        pri_fmt = ' {pri:>4}      '
        sub_fmt = ' {sub:>4}^{pri:<4} '
        day_trailer = ''
        trailer = ''
    else:
        header = '<h3>{text}</h3>'
        day_header = '<table width="100%" border="1"><tr>{sub_hdr}<th>{date}</th></tr>'
        if show_sub:
            sub_hdr = '<th width="8%">Sub</th>'
        line = '<tr>{sub}<td>{by} {text}</td></tr>'
        pri_fmt = '<td width="8%">{pri:>}</td>'
        sub_fmt = '<td width="8%">{sub:>}:<font color="green">{pri:<}</font></td>'
        day_trailer = '</table><hr />'
        trailer = ''

    print(header.format(text = format_plural(j, 'Transaction Journal Entry',
 'Transaction Journal Entries')))
    prev_date = None
    for e in j:
        date = e['date']
        if date != prev_date:
            if prev_date:
                print(day_trailer)
            print(day_header.format(date=format_date_log(date), sub_hdr = sub_hdr))
            prev_date = date
        if show_sub:
            if e['part_of'] is None:
                sub = pri_fmt.format(pri = str(e['journal_id']-1000000))
            else:
                sub = sub_fmt.format(sub =  str(e['journal_id']-1000000), pri = str(e['part_of']-1000000))
        print(line.format(by = e['by'], text=e['description'], sub = sub))
    if prev_date:
        print(day_trailer)
    print(trailer)


def print_full_character(c):
    if c == ['All']:
        c = afal.character_list
    if len(c) > 1:
        if afal_config.text:
            header = '        {characters}\n'
        else:
            header = '<h1>{characters}</h1><br>'
        print(header.format(characters = format_plural(c, 'Character')))
    for char in c:
        print_char(char, verbose = True)
        cparties = afal.get_char_parties(char)
        if len(cparties):
            print_parties(cparties)
        items = afal.get_items('Held_by', char)
        if len(items):
            print_items(items, '', show_note = args.note, show_finder = True, show_owner = True)
        receivable = afal.get_char_debts(char, 'Receivable')
        if len(receivable):
            print_debt(receivable, 'by', 'Receivable')
        payable = afal.get_char_debts(char, 'Payable')
        if len(payable):
            print_debt(payable, 'to', 'Payable')
# was primary=True
        j = afal.get_journal({'latest': True, 'char': char})
        if len(j):
            print_journal(j)


def print_members(members):
    shares = sum(members.values())
    h = {}
    needshare = False
    for char in members:
        share = members[char]
        if share != 1:
            needshare = True
        h[char] = format_share(share)

    if afal_config.text:
        header = '  {text}{shares}'
        lines = ('    {text}{share}', '  {text}{share}', '  {text}{share}', '  {text}{share}\n')
        nlines = len(lines)
        share_text = ' for {share} share'
        noshare_text = ''
        trailer = ''
        share = ''
    elif needshare:
        lines = ('<tr><td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td><td><b>|</b></td>',
 '<td>{text}</td><td>{share}</td></tr>\n')
        nlines = len(lines)
        header = '<h3>{text}{shares}</h3><br><table border="1"><tr>' + \
 (nlines-1) * '<th>Member</th><th>Share</th><th>|</th>' + '<th>Member</th><th>Share</th></tr>'
        share_text = '{share}'
        noshare_text = '1'
        trailer = '</table><hr />'
    else:
        header = '<h3>{text}{shares}</h3><br><table border="1"><tr><th colspan="{nlines}">Member</th></tr>'
        lines = ('<tr><td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td>',
 '<td>{text}</td></tr>\n')
        nlines = len(lines)
        trailer = '</table><hr />'

    if shares != len(members):
        shares = ', ' + format_plural(format_share(shares), 'Share')
    else:
        shares = ''

    print(header.format(text = format_plural(members, 'Member'), shares = shares, nlines = nlines))
    k = h.keys()
    k.sort()
    n = 0
    for i in k:
        line = lines[n%nlines]
        if needshare:
            share = h[i]
            if share != 1:
                share = share_text.format(share = share)
            else:
                share = noshare_text
        print(line.format(text = format_character(i), share=share), end='')
        n += 1
    while n % nlines != 0:
        line = lines[n%nlines]
        print(line.format(text='', share=''), end='')
        n += 1
    print(trailer)


def print_full_party(p):
    if p == ['All']:
        p = afal.party_list
    if len(p) > 1:
        if afal_config.text:
            header = '\n        {text}\n'
        else:
            header = '<h1>{text}</h1>'
        print(header.format(text = format_plural(p, 'Party', 'Parties')))
    for party in p:
        data = afal.get_party_data(party)
        note = data.get('note')
        if not note:
            note = ''
        if afal_config.text:
            print(party)
            print(data['type'], afal.date_to_str(data['date']), note)
        else:
            print("<h2><b>", party_to_log(party), party, "</a></b></h2><br>", sep='')
            print(data['type'], format_date(afal.date_to_str(data['date'])), note, '<hr />')

        members = data['members']
        if len(members):
            print_members(members)

        items = afal.get_items('Found_by', party)
        if len(items):
            print_items(items, 'Found', show_note = True, show_finder = False, show_holder = True, show_owner = True)


def print_people(p):
    people = afal.get_characters(p)
    if len(people) > 1:
        if afal_config.text:
            header = '\n        {text}\n'
            trailer = ''
        else:
            header = '<h1>{text}</h1>'
            trailer = '<hr />'
        print(header.format(text = format_plural(people, p + ' Person', p + ' People')))
    for char in people:
        print_char(char, verbose=False)
    print(trailer)


#############################################################################
parser = argparse.ArgumentParser('Generate a report')
parser.add_argument('--character', '-c', nargs='*', default=[], help='report on these characters')
parser.add_argument('--items', '-i', nargs='*', default = [], help='display sepecified item type(s)')
parser.add_argument('--journal', '-j', default=None, help='journal on this character')
parser.add_argument('--members', '-m', nargs='*', default = [], help='display members of the specified group(s)')
parser.add_argument('--note', '-n', default = False, action='store_true', help='display note entries for items')
parser.add_argument('--party', '-p', nargs='*', default = [], help='report on these parties')
args = parser.parse_args()

if afal_config.text:
    title = ''
    if args.character is not None or args.party is not None or \
 args.items is  not None or args.journal is not None or \
 args.members is not None:
        pass
    else:
        args.character = ['All']
        args.party = ['All']
        args.journal = '{}'
        args.items = ['Unresolved', 'Party', 'Sell', 'Auction', 'Identify', 'Lent']
        args.members = ['Current', 'Former', 'Dead', 'ActiveNPCs',
 'InactiveNPCs', 'DeadNPCs']
    trailer = ''
else:
    cgitb.enable()
    form = cgi.FieldStorage()
    title = "Who knows what?"
    tmp = form.getlist('journal')
    if len(tmp) > 0:
        js = form.getfirst('start')
        if js is None or len(js) < 5 or js[0:5] != 'date.':
            js = 'All'
        else:
            js = js[5:]
        je = form.getfirst('end')
        if je is None or len(je) < 5 or je[0:5] != 'date.':
            je = 'All'
        else:
            je = je[5:]
        jc = form.getfirst('char')
        if jc is None or len(jc) < 5 or jc[0:5] != 'char.':
            jc = 'All'
        else:
            jc = jc[5:]
        args.journal = "{o}'starting_on': '{js}', 'up_to': '{je}', 'char': '{jc}'{c}".format(o = '{', js = js, je = je, jc = jc, c = '}')
        if jc is not None and jc != 'All':
            title = jc + ' Transaction Journal Report'
        else:
            title = 'Transaction Journal Report'

    for todo in form.getlist('todo'):
        if len(todo)>5 and todo[0:5] == 'char.':
            args.character.append(todo[5:])
            if len(args.character)> 1 or todo == 'char.All':
                title = 'AFAL Multi-Character Report'
            else:
                title = todo[5:]
        elif len(todo)>6 and todo[0:6] == 'party.':
            args.party.append( todo[6:] )
            if len(args.party) > 1 or todo == 'party.All':
                title = 'AFAL Multi-Party Report'
            else:
                title = todo[6:]
        elif len(todo)>6 and todo[0:6] == 'items.':
            args.items.append(todo[6:])
            if len(args.items) > 1:
                title = 'Items'
            else:
                title = args.items[0]+' Items'
        elif len(todo)>7 and todo[0:7] == 'people.':
            args.members.append(todo[7:])
            tmp = {'people.All': 'All People',
 'people.Current': 'Current AFAL Members',
 'people.Former': 'Former AFAL Members',
 'people.Dead': 'Deceased AFAL Members',
 'people.ActiveNPCs': 'NPCs We May Meet Again',
 'people.InactiveNPCs': 'NPCs We Are Unlikely To Meet Again',
 'people.DeadNPCs': 'NPCs We Have Killed'}
            if len(args.members) == 1 and todo in tmp:
                title = tmp[todo]
            else:
                title = 'People'
        else:
            title = 'Everything'
            args.character = afal.character_list
            args.party = afal.party_list
            args.journal = '{}'
            args.items = ['Unresolved', 'Party', 'Sell', 'Auction', 'Identify', 'Lent']
            args.members = ['Current', 'Former', 'Dead', 'ActiveNPCs', 'InactiveNPCs', 'DeadNPCs']
    print('Content-Type: text/html\n'
 '\n'
 '<html>\n'
 ' <head><title>{title}</title></head>\n'
 ' <body background="{background}">\n'
 '  {menu_html}\n'
 '  <center>\n'.format(
 title = title,
 background = afal_config.background,
 menu_url = afal_config.menu_url,
 menu_html = afal.menu_html))
    trailer = \
 '   <br><b><a href="{menu_url}">Return to Menu</a></b><br>\n'\
 '  </center>\n'\
 ' </body>\n'\
 '</html>\n'


if args.character:
    print_full_character(args.character)

if args.party:
    print_full_party(args.party)

if args.journal:
    j = afal.get_journal(eval(args.journal))
    if len(j) > 0:
        print_journal(j, show_sub = True)

if args.items:
    for i in args.items:
        items = afal.get_items(i)
        if len(items) > 0:
            print_items(items, i, show_note = True, show_finder = True, show_owner = True, show_holder = True)

if args.members:
    for i in args.members:
        print_people(i)

print(trailer.format(menu_url = afal_config.menu_url))
afal.fini()
